%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: Sweet_City_Logo.eps
%%Creator: Adobe Illustrator(R) 20.1
%%For: Oleksii Bernaz
%%CreationDate: 10/4/2018
%%BoundingBox: 0 0 1000 1000
%%HiResBoundingBox: 0 0 1000 1000
%%CropBox: 0 0 1000 1000
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 20.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 20.1.0 x174 R agm 4.7740 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c132 79.159284, 2016/04/19-13:13:40        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">1_Burn_template</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2018-10-04T13:04:59+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2018-10-04T13:04:59+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2018-10-04T13:04:58+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015.3 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9R5SzdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVQOs63pOi6fLqOrXcdlZQj455&#xA;W4r7AdyT2A3OAmmUYmRoPBPN3/OU90l+YfKenQyWcZIN3qCyEy+6RRvEUH+sxPsMx5Z+52OPQbeo&#xA;/JT0b/nK++VlXWtBilU05y2crRkeJEcgkr/wYxGfvCy7PHQvSvLH58/lvr7JENQOmXT7CDUFEG//&#xA;ABkq0X/D1y2OWJcXJpJx6W9BR0kRXRg6OAyspqCDuCCMm4y7CrsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVeWfmR+fvlnyt6thpnHWNcWqmGNv3ELdP30grUg/s&#xA;Lv48cqnlAcvDpJT3OwfMvm/zx5m83agb3W7xpyCfQt1+GCEH9mOMbL8+p7k5iykTzdrjxRgKDMfy&#xA;b8uaTdLeavfQLdSwOIbWOQVRG4hi9DsTuKeGaTtXUSjUBtbmYcd7s383eWdJ1XRbiOaCNZkQtb3A&#xA;UB0cdKEb08R3zVafUzxyBBcs4xLZ88BgehrnXusZd5K/NLzp5PlT9FXzPZA1fTristswrUjgT8Ff&#xA;FCDkozIacuCE+YfTP5afnZ5Z86BLJ6aZrtN9PlYFZKdTBJtz8eOzexArmTDIJOrz6WUN+Yei5a4r&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqRebvO3lrylpxvtcvFt0IP&#xA;owj4ppWH7MUY3Y/gO5GRlIDm2Y8Upmg+ZfzI/P8A8y+aPVsNJ5aPojVUxxt/pEynb97IvQEdUXbx&#xA;LZjTyku1w6SMNzuXleVOW7FWT+SPPF15YuZR6X1mxuaetBy4sGXo6Gh3odx3zC1mjGYc6kG3Fl4T&#xA;5J95o/NttR0+Sz0y2e3aZSjzSkVUEUPELWpp3rtmDp+yeGYlM2B0DkT1Q4aiNy84RAvTcnN2S4QC&#xA;8Kx7YLTS+JpoZUmicxSxsHjkUlWVlNQykbgg42vC+u/yE8+6n5t8oyfpZvV1HS5hbSXJ6yoUDRu/&#xA;+X1DeNK98zMUrDpNXiEJbci9My1xXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;smmhgieaZ1ihjUtJI5CqqgVJJOwAwJAeH/mP/wA5Kabp/q6b5OVb+8FVfVJATbRnp+6XYykeP2f9&#xA;YZTPN3Ofh0RO8tnzrrWuavreoSajq93Le3sv255m5GnZR2VR2UbDMYkl2UYCIoIEAnoMDNvg3yxt&#xA;adxHdhitN/B7nFV/pyBS3pEKOpINMFsqPcs5t22w0xtXs4BcM3JiAtOnvkZGmzHDiRi6dbDqC3zP&#xA;9KZXxluGGL6B/wCcUP8AlHtd/wCYuL/k1mwwcnQdofUHuuXuvdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdir5w/5ym806omr6b5ZimaLTWtRfXEaGgld5XjQP4hPRqB4n5ZjZ5Hk7TQ&#xA;YxRl1eCVHhmO7F3I9qDGlt1WJpXFUeulj9qT7hlfiN4weaFu4Fhl4KSRQHfJxNhryR4TS23/AN6I&#xA;v9df14y5MYcwmt3/ALzSfLKY83LyfSUmzIcJHaX9qT5D+OVZHIwdUwytyHvH/OKH/KPa7/zFxf8A&#xA;JrNlg5PN9ofUHuuXuvdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir5b/wCcoUD/&#xA;AJj6Yh6NpUAP/STcZiag7/B3HZwuPx/U8vWxtV/Yr8yTmHxl3AxRQN+iJOAgCjiNhlkDs0ZQAVbT&#xA;Y0ZXLKCQRQkVyOQs8ICPytyEr1L/AHoH+qP45bj5OLm5qNsCbiIDcl1oPpyUuTXDmGQfo67mQr6D&#xA;lW9iPxzF8SI6uaRaVatpr2MkaunDmpIBINaH2Jy/FkEnFyxA5Iry1p7Xkk4DhAgUkkV61yvUZOGm&#xA;eDqyNPLsA+3Mzf6oC/rrmGdSe5yHrX/OKH/KPa7/AMxcX/JrN9g5PN9ofUHuuXuvdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdir5e/5ybRn/M3SUQVZtLgAHv8AWrjMPUmvk7ns36f8&#xA;79TAk0TUG6oF/wBZh/Cuaw54u7ak8oSTyB5Zwm1KLv8ArAwDVgcg1yxCRtGWvlW0gUj1nau5pQfr&#xA;rlctUT0ZRgI8kT+iNLi/vN/9d6fqpkPGmeTJjXmWyj+trLZ8Gg4AERsCQQT2zN00zVS5uPmgSbSv&#xA;T5BFqFtIwNElRiB1oGBy/ILiR5NMOYZk/mNP2ICf9ZqfqBzXDTebnIWe9mvGVjYxylfslozIRXJx&#xA;xiP8SCAVSNdbI4wxeip7KqR/0wHw+u6QF36M1iX+8noPBnJ/AVweLAcgr2D/AJxQ/wCUe13/AJi4&#xA;v+TWbzByeb7Q+oPdcvde7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXzD/zktKY&#xA;vzR0eUDkU0y3IXxpdXGYWrF7eTuezfp/zv1ML/SmrSf3VrQePFj+OwzUeFAcy7t3/Owy/wCQP9gP&#xA;7cf3QVr9E6rL/e3O3hyY/h0w+NAcgq5PLq1rJOT40Wn6ycB1PcFVl0KwQVcsw7lmAH4AZDx5FVOX&#xA;TvLqurusYdCGB5kmoNdxXfJDJl82JgDurfpLR4f7vjUdkSn8BkfCmebJTfzDaj7Ebt86D+JwjTFV&#xA;B/Mcn7EAH+s1f1AZMaYd6qD69ft04J8h/UnJjTxV7N/zih/yj2u/8xcX/JrNzg5PN9ofUHuuXuvd&#xA;irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir5i/5yUlWL809GlapVNNt2IHXa6uMw&#xA;dWLBHk7ns36f879TDH8xQj7ELN8yB+quagaY97u1B/MVwfsRIvzqf6ZMaYd6qD63qDdHC/6qj+Nc&#xA;mMEVUH1C9f7U7/IMR+rJjHEdFUGZmNWJJ8TvkqVrCrsVdiq1pol+06j5kY0WJkFJ722UH4wT4DfJ&#xA;CBYnJEPob/nFWyuI/Ker3boVhuL0JCxqOXpRDkR7fHTNhg5PPa8+oDye3Ze4DsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVfLn/ADk+QPzJ0snYfouD/qJuMw9Rz+Duezfp/wA79TzN&#xA;pol+06j5kZhUXcmQU2vbVesg+ip/Vh4SxOSPeptqVuOnI/If1yXhlBzRWjUS7BIoWd22VR1P0AHD&#xA;4bA5wmtl5b886hT6h5fvp1PRktZ3X/ggtMkMJapayI6hPrL8m/zevqGPQ3hU9Wmkghp9Ejhvwywa&#xA;c9zTLtCI6p7Zf841fmbc0Nzd2Nmv7QeeRm+6KNx+OTGnLRLtKPmn1l/zihfvQ6h5kRPFYbZpK/7J&#xA;5I/1ZMadpl2j5Mgsf+cVvJkdDe6pqFyw7RmGFT8wY5D+OSGANR18+gDIrD/nHn8q7Qqz6XJduu4a&#xA;4uJjv7qjIp+kZIYotR1mQ9XoNhp9jp1nFZWFvHa2cC8IbeFQiIvgFG2WAOMSSbKIwodirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirzP80/yRsvPur2eqnVH065toBaygQidXiV2kWg5&#xA;x8WBkbff5ZVPHxOVg1Rxiqtj9h/zir5Njob7VdQuSOoiMMKn6Ckh/HIjAG06+XQBkVh/zjv+VdrQ&#xA;yabLeMOjT3M3X3EbRr+GSGKLUdZkPVkNh+V35dWFDb+XLDkvRpIEmYf7KUOckIDuaznmepZDaafY&#xA;Wa8LO2itk6cYUWMfcoGSpqJJ5ojCh2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxVokAEk0A3JOBUDZa9od9M0FlqNrdTpXnFDNHI4p1qqknGwyMCOYRizwtK8Ky&#xA;KZowGeMEFlDV4kjqK0NMUU0lxA8rxJIrSxU9SMMCy16cgNxXFactxAzSKsis0JpKoYEoSOVG8NjX&#xA;fFaQia9oUkgjTUbV5GPFUWaMsSewAbGwngPcrXepadZ8ReXUNsX+x60ipWnhyIxtAiTyaTVdLktn&#xA;ukvIHtozSSdZEKKf8pgaDrjaeEqK+YdAZgq6laszGiqJ4yST2HxY2F4D3JhhYoKXW9Fhu1s5b+2j&#xA;vGNFtnmjWQk9ghPLvgsMuE1dIp5YkZEd1VpDxjUkAsQK0UHrsMUIW41rR7aUw3N9bwyr9qOSVEYV&#xA;8QSDjaREnoqQanptxE80F3DLDGaPIkisqk9iQaDG0GJV2dEXk7BVHUk0G+2KF2FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FWD/nNoPmPXfy/v9O8vlmvpGjZ7dGCNNCrfvIgxKjcb0rvSnfK&#xA;8gJGzkaacYzBk8X8ly/lTp2r6Hp3mXy7qXljzRZyW7fX5JZxHLOjABpFkYGNJHH7KUHTlTKY8PUU&#xA;XOy+IQTEiUWX65rCeTf+chLnVL2Qrp2taO0sxJPEC2gJp8+Vlt/re+TJqbRCPHhocwfx97DPy1v9&#xA;W8vec/L/AJz1icpY+eJL+K6Zq0B9WilifGbiRXtkIGiCerfnAlEwH8FJx5Ee8v8A8svzQ82Ss6vr&#xA;bXNAT2jieQ09v9J4/RTDH6SWGWhkhHuYr+V+m+TbuDSk1PyXq2rXktzxfVbYzG13lopKqVSiD7W/&#xA;bIwA7m7PKQupAJ9+eospfzn02PUbC41eyFhEH021LCaQVmPGPj8Qo3xbYcv1NelvwjRrdn35d+S/&#xA;Iev+TdT03/C1/oun3dyhurbUHnWSV4QGjkjcsG4rWm1PpyyEQRycbNlnGQPECWA/l5+V3kzV/wAz&#xA;fN2h6hZvNpujysLGH1pVKhZilGZWDN8I7nK4QBkQ5ObPOOOJHMvZvzd8wX3lz8uNY1PTWMV5FHHD&#xA;byr1jM8qQ8wexUPUe+X5DUXB08BKYBedflx+RnkjzF5DsNX1kXNzq2qK1xNerO6spZ2HFRuh2G5Y&#xA;E1yqGIEWXJzaqcZkDkFv52Q/o7zt+WlpbSOsdncJFCxYlgEnt0BLdyQu5xybELpd4T/Hehf+cmPI&#xA;3lrT9HTzTaWxj1nUdSihu5/Ucq6tbysfgJKg1iXoMc0RVstDlkTwnkAy+H8mPLMv5ZX2k6LE1lea&#xA;7a2s8tw0sj8riACaIEOWATmTWg6H2GT8McNBo/My8QE9HluhX3nX8wm0X8sNSWS2ttDlkOvXNf3j&#xA;QWzBEWT/ACo/7tetWKk9K5UCZelzJiGO8g68n1IiqiKi7KoAA67D55kuoXYVdirsVdirsVdirsVd&#xA;irsVdirsVdirsVdirsVdiqT+bdL1rVNAubLRdTbR9Sk4mC/VBJxKsGIIPZgOJORkCRszxyANkWHl&#xA;V7+Sv5headS01vPXmW1v9O01iyJbQKszKxUunNY4ftcAKkmnhlRxk8y5g1UIA8Aolkf5w/lFJ59O&#xA;mT2t8mn3dh6sckjoXDxS8TT4SDVSu3zOSyY+Jq02o8O9rtW87/lDZ6/5B0zytY3Is5dG9E2F268q&#xA;mJDG3MLQ/GG5Gn7WMsdikYtQYzMj1Reh/llFpn5Wy+R/rfKS5tbiGe/VNvVueRL8CdwpYCldwMIh&#xA;UaRLPeTjYp5Y/K784PLenQaVpPnK0ttMgcssH1KOWnNub/FIhc1JP7WRjCQ6t2TPikbMd/emfn/8&#xA;qPMmteebHzh5d1uLS9Qs7dYE9aES8WUuOS1DKarKRRl/sMsZJsMMOojGBjIWGVeR9J89adDdjzZr&#xA;sWtyyMn1Qw28duIlUHnX01TlyqOo2p75KIPUtOWUD9IpLvKP5bt5f87+ZfMpvhcJrr847YR8TFyc&#xA;yNybkeXxGg2wRhRJZ5M3FARrkyfzDoWn6/ol7o2ooXs76IxSgfaFdwyk1oytRl9xkyLFNMJmJsPJ&#xA;dN/KD82dEtToWhedktfLhkZkBh/0iNXarcPhYr40WVRWp2ykY5DYHZzZanHLcx9TKvN/5VSeYtX8&#xA;o38uqv8A8626m5aVA8t0EMb8uQKhXZovi27+285Qsjyaceo4RIV9SO/Nf8vW89+WotIS8FjLBdR3&#xA;cczJ6ikojxlSoK/syn6cZw4hTHT5vDlbK7C0Wzsba0Vi620SRKx6kIoWp+7JhpJs2wryj+WUmgef&#xA;/Mfmp74TprRb0bZUKmMSSCV+TEmtCoApkIwokt+TPxQEa5M9yxx3Yq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYqxLQfOs9/qHm2K6gSO28uXPoxGOpd0WESMWrtWtaUyAlz8m6eKhH+k&#xA;xPyv+avm281DyvPq9nYJonm57mOwS1MxubdoCePrM7Mj8qfsqKfRTIRmdvNuyaeIEqu4pR5N/PXz&#xA;JrLn61a2DhtO1DUTDDHcwNB9T5emjPMzJP6nHf0uld6UOCOUlnl0sY9/MBGWn5xebpPIV/5lfT7W&#xA;S6jNktlaJBewqzXcvAgyTBUl9vSY+/UVPiGrQdNHjEb7+5MfL351HzB510PRtOsUOl6lbE3l4zHn&#xA;FeC1e6e3Wnwn0ggV/c/eRks0wnpeGBJO4R/nL8y9R0LWNfsILSGVNI0NdVheQtV53n9IK1CPgAIO&#xA;2/vhlOiWOPAJAHvlSR2H5rfmBcaBq17DokWpSWS2bW17Z214kBFxUzVhlPqyegv2vTb8MiJmmw6e&#xA;FgXXPuTfQPzPvr//AA4hl0+//S+o3Nhd3FmlzEsfoW5mA9K4pJHLWnJW5CnQ74RPkwngAvmKCUXX&#xA;536ta6bpeoyaZC9vcanfWuo8C5aO0spFVpUFftBH5NXbb7h4jMaUEkX0H2sk8gfmRcebPMeu2aWs&#xA;cek2PB9KvEJJuYTLLA0p34lWeA8aZKM7LVmw8EQerPMscd2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KsbX8v/AC2nmKbzBGlxFf3MgmuUjuZ0glcJ6YaSBXEbfD4rkOAXbb40&#xA;uHh6IbQ/yr8j6JqsOp6fYslza+p9SV55pYrf1q+p6MTuyJyr2GIgAmWonIUSr2v5beS7a2sLaHTg&#xA;sGmwXVrZp6kp4Q31frCklqtz5Hdq0rtTHgCDmmb35/oQ9j+VvlCz0x9MSO6ksWe3dbea7uZUQ2sg&#xA;kiEau5CAMNwvXEQCTnkTaOsvIflOxv7a/stPS3ubS4ubyFoyygT3kYincrWh5IKeA7Uw8IYnLIii&#xA;VTVvJPlnVrq9ur+yE1xqNkNNu5Oci87YOZAlFYAHka8h8XviYgrHLIVXQ2idT8uaVqWjrpFwki2S&#xA;BBGsE0sDp6VOHGSJkf4aePzxIsUiMyDaSSflV5IfSItL+pSLFDdNqEdwtxOLkXbijzm45+qXbvVv&#xA;1DBwCmf5id2ibb8ufJ1vY2NhFp6i006O5it4S7sCt6hS49SrHmZFO5auPAEHNIkm+aO0byn5f0W4&#xA;M+mWgtW+qw2QVWYqILcu0ahSSKgytU9T3wiIDGWSUuab5Jg7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:184241fd-a97a-cb43-ad1e-99c954fbfaf1</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:184241fd-a97a-cb43-ad1e-99c954fbfaf1</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:2a90b38a-06b0-4bfe-a381-aa78bdc02a2f</stRef:instanceID>
            <stRef:documentID>xmp.did:ee596c91-4d75-624b-af17-3770df2689b0</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:e27399a5-d128-ac49-83b6-0051e0449639</stEvt:instanceID>
                  <stEvt:when>2016-04-03T14:24:21+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:184241fd-a97a-cb43-ad1e-99c954fbfaf1</stEvt:instanceID>
                  <stEvt:when>2018-10-04T13:04:59+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015.3 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>1000.000000</stDim:w>
            <stDim:h>1000.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Black</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=50 M=100 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>146</xmpG:red>
                           <xmpG:green>39</xmpG:green>
                           <xmpG:blue>143</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Grays</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>35</xmpG:red>
                           <xmpG:green>31</xmpG:green>
                           <xmpG:blue>32</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Alazarin Sky</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Blue Wedding</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Blue and green for web 2</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Carries Blog</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Copy of Carries Blog</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Digerati</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Eastman Wedding 2</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Fancy Frills Boutique</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Flat MCHP</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Good Mood CMYK</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=0</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>MyOwn</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>SHINE</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>patch</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Wowsrb Suau</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>theme cobra 1</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=255 B=255</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 15.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1000 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1000 li
1000 1000 li
1000 0 li
cp
clp
1000 1000 mo
0 1000 li
0 0 li
1000 0 li
1000 1000 li
false sop
/0 
[/DeviceRGB] /CSA add_res
1 .980392 .941176 rgb
f
332.441 391.63 mo
332.441 571.998 li
654.154 530.299 li
662.782 518.589 li
662.782 338.011 li
332.441 391.63 li
cp
.572549 .192157 .113725 rgb
f
332.441 464.354 mo
332.441 520.429 li
662.782 475.448 li
662.782 417.309 li
332.441 464.354 li
cp
.729412 .368627 .156863 rgb
f
332.441 485.321 mo
332.441 499.462 li
662.782 454.481 li
662.782 438.276 li
332.441 485.321 li
cp
.572549 .192157 .113725 rgb
f
648.197 524.136 mo
342.634 562.378 li
340.185 562.738 337.987 560.841 337.987 558.366 cv
337.987 418.426 li
337.987 417.203 338.885 416.165 340.095 415.987 cv
383.852 409.573 li
385.34 409.355 386.675 410.508 386.675 412.012 cv
386.675 448.261 li
386.675 449.765 388.011 450.919 389.499 450.7 cv
417.455 446.583 li
418.665 446.405 419.561 445.367 419.561 444.144 cv
419.561 412.507 li
419.561 411.284 420.457 410.247 421.666 410.068 cv
434.294 408.201 li
435.503 408.022 436.399 406.984 436.399 405.762 cv
436.399 394.18 li
436.399 392.958 437.295 391.92 438.504 391.742 cv
477.577 385.984 li
479.04 385.769 480.354 386.903 480.354 388.382 cv
480.354 455.786 li
480.354 456.755 480.921 457.634 481.803 458.033 cv
524.728 477.443 li
525.917 477.268 526.798 476.247 526.798 475.045 cv
526.798 375.24 li
526.798 374.038 527.679 373.018 528.868 372.843 cv
554.837 369.012 li
556.3 368.796 557.614 369.93 557.614 371.409 cv
557.614 413.281 li
557.614 414.76 558.928 415.894 560.392 415.678 cv
574.139 413.645 li
575.603 413.429 576.917 414.563 576.917 416.043 cv
576.917 439.813 li
576.917 441.292 578.231 442.426 579.694 442.21 cv
608.128 438.015 li
609.317 437.839 610.198 436.819 610.198 435.617 cv
610.198 359.468 li
610.198 358.263 611.084 357.24 612.277 357.069 cv
653.853 350.676 li
655.313 350.466 656.62 351.599 656.62 353.074 cv
656.62 514.38 li
656.62 519.271 653.035 523.423 648.197 524.136 cv
514.066 265.43 mo
336.513 376.717 li
329.147 381.186 324.649 389.177 324.649 397.793 cv
324.649 567.656 li
324.649 573.675 329.995 578.29 335.949 577.412 cv
648.197 538.311 li
662.782 536.257 669.239 528.347 669.239 514.692 cv
669.669 341.131 li
669.887 334.123 667.138 327.345 662.049 322.522 cv
637.72 299.467 592.652 272.164 530.708 262.14 cv
524.955 261.209 519.049 262.406 514.066 265.43 cv
.4 .129412 .0705882 rgb
f
653.116 340.187 mo
337.407 392.444 li
336.535 392.588 335.712 391.998 335.567 391.127 cv
335.425 390.265 336.001 389.45 336.857 389.292 cv
651.601 331.509 li
653.994 331.07 656.289 332.653 656.729 335.046 cv
657.168 337.439 655.585 339.734 653.192 340.174 cv
653.116 340.187 li
cp
.439216 .145098 .0784314 rgb
f
274.713 702.187 mo
274.031 701.732 273.531 701.147 273.213 700.432 cv
272.895 699.716 272.776 698.995 272.855 698.268 cv
272.935 697.541 273.14 696.825 273.469 696.12 cv
273.798 695.417 274.275 694.854 274.9 694.434 cv
275.525 694.014 276.218 693.752 276.979 693.649 cv
277.74 693.548 278.586 693.735 279.518 694.212 cv
283.357 695.848 287.186 696.666 291.003 696.666 cv
293.524 696.666 295.586 696.223 297.188 695.337 cv
298.79 694.45 299.591 693.1 299.591 691.281 cv
299.591 688.896 297.841 687.124 294.342 685.965 cv
283.028 682.216 li
278.779 680.626 275.781 678.871 274.031 676.951 cv
272.282 675.031 271.407 672.391 271.407 669.027 cv
271.407 664.416 273.236 660.735 276.894 657.986 cv
280.552 655.237 285.493 653.862 291.718 653.862 cv
294.671 653.862 297.699 654.243 300.8 655.004 cv
303.902 655.766 306.258 656.896 307.872 658.395 cv
308.554 659.054 308.985 659.826 309.167 660.712 cv
309.349 661.599 309.303 662.405 309.031 663.132 cv
308.758 663.859 308.366 664.529 307.855 665.143 cv
307.344 665.756 306.735 666.137 306.032 666.284 cv
305.327 666.433 304.623 666.358 303.919 666.063 cv
301.828 664.904 299.937 664.104 298.245 663.66 cv
296.552 663.217 294.535 662.996 292.195 662.996 cv
290.65 662.996 289.23 663.161 287.936 663.49 cv
286.641 663.819 285.55 664.382 284.664 665.177 cv
283.778 665.973 283.335 666.938 283.335 668.073 cv
283.335 669.527 283.942 670.692 285.158 671.566 cv
286.374 672.441 288.163 673.276 290.526 674.071 cv
291.071 674.275 291.94 674.446 293.133 674.583 cv
294.326 674.719 295.206 674.89 295.774 675.094 cv
297.864 675.73 299.653 676.344 301.141 676.934 cv
302.629 677.525 304.078 678.246 305.486 679.098 cv
306.895 679.95 308.025 680.876 308.877 681.875 cv
309.729 682.875 310.411 684.073 310.922 685.471 cv
311.433 686.868 311.689 688.441 311.689 690.19 cv
311.689 695.008 309.86 698.818 306.202 701.624 cv
302.544 704.431 297.591 705.833 291.344 705.833 cv
284.232 705.833 278.688 704.617 274.713 702.187 cv
cp
.4 .129412 .0705882 rgb
f
380.047 702.255 mo
379.207 703.187 378.235 703.891 377.133 704.368 cv
376.031 704.845 374.833 705.077 373.538 705.066 cv
372.243 705.055 371.016 704.805 369.857 704.316 cv
368.699 703.828 367.637 703.005 366.671 701.846 cv
365.705 700.688 364.995 699.268 364.541 697.586 cv
355.408 666.472 li
346.241 697.586 li
345.786 699.268 345.076 700.688 344.111 701.846 cv
343.145 703.005 342.083 703.828 340.924 704.316 cv
339.766 704.805 338.544 705.055 337.261 705.066 cv
335.977 705.077 334.778 704.845 333.666 704.368 cv
332.552 703.891 331.575 703.187 330.735 702.255 cv
329.894 701.323 329.337 700.244 329.065 699.018 cv
320.34 661.974 li
319.818 659.565 320.346 657.577 321.925 656.01 cv
323.504 654.441 325.31 653.999 327.344 654.681 cv
329.377 655.362 330.689 657.214 331.28 660.235 cv
338.198 691.759 li
346.241 665.449 li
346.672 663.745 347.115 662.32 347.57 661.173 cv
348.024 660.025 348.598 658.946 349.291 657.935 cv
349.983 656.924 350.835 656.175 351.847 655.686 cv
352.857 655.197 354.045 654.953 355.408 654.953 cv
356.771 654.953 357.958 655.197 358.969 655.686 cv
359.98 656.175 360.832 656.93 361.525 657.952 cv
362.218 658.975 362.786 660.054 363.229 661.189 cv
363.672 662.326 364.121 663.745 364.575 665.449 cv
372.584 691.759 li
379.536 660.235 li
380.126 657.214 381.438 655.362 383.472 654.681 cv
385.505 653.999 387.306 654.441 388.874 656.01 cv
390.441 657.577 390.964 659.565 390.441 661.974 cv
381.717 699.018 li
381.444 700.244 380.887 701.323 380.047 702.255 cv
cp
f
405.262 703.771 mo
404.444 703.26 403.808 702.567 403.354 701.692 cv
402.899 700.818 402.564 699.893 402.348 698.915 cv
402.132 697.938 402.024 696.904 402.024 695.813 cv
402.024 664.87 li
402.024 663.575 402.07 662.484 402.161 661.599 cv
402.251 660.712 402.456 659.821 402.774 658.923 cv
403.092 658.026 403.529 657.305 404.086 656.759 cv
404.643 656.214 405.404 655.776 406.37 655.447 cv
407.335 655.118 408.5 654.953 409.863 654.953 cv
431.81 654.953 li
433.127 654.953 434.246 655.402 435.167 656.299 cv
436.086 657.197 436.546 658.293 436.546 659.588 cv
436.546 660.883 436.086 661.968 435.167 662.843 cv
434.246 663.717 433.127 664.154 431.81 664.154 cv
414.225 664.154 li
414.225 674.753 li
430.276 674.753 li
431.593 674.753 432.713 675.202 433.633 676.099 cv
434.553 676.997 435.013 678.093 435.013 679.388 cv
435.013 680.683 434.553 681.768 433.633 682.643 cv
432.713 683.518 431.593 683.954 430.276 683.954 cv
414.225 683.954 li
414.225 695.371 li
432.662 695.371 li
433.889 695.371 434.928 695.813 435.78 696.7 cv
436.632 697.586 437.058 698.677 437.058 699.972 cv
437.058 701.267 436.632 702.352 435.78 703.226 cv
434.928 704.101 433.889 704.538 432.662 704.538 cv
408.125 704.538 li
407.034 704.538 406.08 704.282 405.262 703.771 cv
cp
f
452.015 703.771 mo
451.196 703.26 450.56 702.567 450.106 701.692 cv
449.651 700.818 449.316 699.893 449.101 698.915 cv
448.884 697.938 448.777 696.904 448.777 695.813 cv
448.777 664.87 li
448.777 663.575 448.822 662.484 448.913 661.599 cv
449.004 660.712 449.208 659.821 449.527 658.923 cv
449.845 658.026 450.282 657.305 450.839 656.759 cv
451.395 656.214 452.156 655.776 453.122 655.447 cv
454.087 655.118 455.252 654.953 456.615 654.953 cv
478.562 654.953 li
479.879 654.953 480.999 655.402 481.919 656.299 cv
482.839 657.197 483.299 658.293 483.299 659.588 cv
483.299 660.883 482.839 661.968 481.919 662.843 cv
480.999 663.717 479.879 664.154 478.562 664.154 cv
460.977 664.154 li
460.977 674.753 li
477.028 674.753 li
478.346 674.753 479.465 675.202 480.385 676.099 cv
481.306 676.997 481.766 678.093 481.766 679.388 cv
481.766 680.683 481.306 681.768 480.385 682.643 cv
479.465 683.518 478.346 683.954 477.028 683.954 cv
460.977 683.954 li
460.977 695.371 li
479.414 695.371 li
480.641 695.371 481.68 695.813 482.532 696.7 cv
483.384 697.586 483.81 698.677 483.81 699.972 cv
483.81 701.267 483.384 702.352 482.532 703.226 cv
481.68 704.101 480.641 704.538 479.414 704.538 cv
454.877 704.538 li
453.787 704.538 452.833 704.282 452.015 703.771 cv
cp
f
506.826 702.442 mo
505.61 701.045 505.003 699.381 505.003 697.449 cv
505.003 664.325 li
495.631 664.325 li
494.313 664.325 493.172 663.864 492.207 662.944 cv
491.241 662.024 490.758 660.917 490.758 659.622 cv
490.758 658.327 491.241 657.22 492.207 656.299 cv
493.172 655.379 494.313 654.919 495.631 654.919 cv
526.745 654.919 li
528.063 654.919 529.199 655.379 530.153 656.299 cv
531.107 657.22 531.585 658.339 531.585 659.656 cv
531.585 660.951 531.107 662.053 530.153 662.962 cv
529.199 663.87 528.063 664.325 526.745 664.325 cv
517.578 664.325 li
517.578 697.449 li
517.578 699.381 516.959 701.045 515.721 702.442 cv
514.482 703.84 513 704.538 511.273 704.538 cv
509.523 704.538 508.041 703.84 506.826 702.442 cv
cp
f
569.617 704.146 mo
566.664 703.021 564.074 701.408 561.848 699.307 cv
559.62 697.206 557.865 694.519 556.582 691.247 cv
555.299 687.976 554.656 684.318 554.656 680.273 cv
554.656 676.185 555.299 672.47 556.582 669.13 cv
557.865 665.79 559.638 663.013 561.898 660.798 cv
564.159 658.582 566.823 656.873 569.89 655.669 cv
572.957 654.465 576.285 653.862 579.875 653.862 cv
582.942 653.862 585.726 654.203 588.225 654.885 cv
589.814 655.34 591.689 656.123 593.848 657.236 cv
594.574 657.714 595.154 658.281 595.586 658.94 cv
596.017 659.6 596.278 660.258 596.369 660.917 cv
596.46 661.576 596.449 662.246 596.336 662.928 cv
596.222 663.609 595.966 664.205 595.568 664.717 cv
595.171 665.228 594.711 665.66 594.188 666.012 cv
593.666 666.364 593.035 666.54 592.297 666.54 cv
591.559 666.54 590.792 666.381 589.997 666.063 cv
586.543 664.563 583.408 663.813 580.591 663.813 cv
579.068 663.813 577.733 663.916 576.587 664.12 cv
575.439 664.325 574.274 664.763 573.094 665.433 cv
571.912 666.103 570.952 667.012 570.214 668.158 cv
569.476 669.306 568.868 670.874 568.391 672.861 cv
567.913 674.85 567.675 677.207 567.675 679.933 cv
567.675 685.136 568.72 689.095 570.811 691.81 cv
572.9 694.524 576.013 695.882 580.147 695.882 cv
581.874 695.882 583.806 695.599 585.941 695.03 cv
588.076 694.462 589.997 693.701 591.701 692.747 cv
592.723 692.201 593.757 692.247 594.802 692.883 cv
595.938 693.564 596.619 694.599 596.847 695.984 cv
597.165 697.938 596.369 699.665 594.461 701.164 cv
590.394 704.277 585.282 705.833 579.126 705.833 cv
575.74 705.833 572.57 705.271 569.617 704.146 cv
cp
f
610.39 702.459 mo
609.174 701.074 608.566 699.404 608.566 697.449 cv
608.566 662.041 li
608.566 660.088 609.174 658.412 610.39 657.015 cv
611.604 655.617 613.087 654.919 614.837 654.919 cv
616.563 654.919 618.04 655.617 619.267 657.015 cv
620.493 658.412 621.107 660.088 621.107 662.041 cv
621.107 697.449 li
621.107 699.404 620.493 701.074 619.267 702.459 cv
618.04 703.846 616.552 704.538 614.803 704.538 cv
613.075 704.538 611.604 703.846 610.39 702.459 cv
cp
f
647.156 702.442 mo
645.94 701.045 645.333 699.381 645.333 697.449 cv
645.333 664.325 li
635.961 664.325 li
634.644 664.325 633.502 663.864 632.536 662.944 cv
631.57 662.024 631.088 660.917 631.088 659.622 cv
631.088 658.327 631.57 657.22 632.536 656.299 cv
633.502 655.379 634.644 654.919 635.961 654.919 cv
667.075 654.919 li
668.393 654.919 669.529 655.379 670.483 656.299 cv
671.438 657.22 671.915 658.339 671.915 659.656 cv
671.915 660.951 671.438 662.053 670.483 662.962 cv
669.529 663.87 668.393 664.325 667.075 664.325 cv
657.908 664.325 li
657.908 697.449 li
657.908 699.381 657.289 701.045 656.051 702.442 cv
654.813 703.84 653.33 704.538 651.604 704.538 cv
649.854 704.538 648.371 703.84 647.156 702.442 cv
cp
f
692.63 685.761 mo
680.089 665.313 li
679.248 663.677 678.851 662.099 678.896 660.576 cv
678.941 659.054 679.419 657.861 680.327 656.998 cv
681.236 656.135 682.258 655.55 683.395 655.242 cv
684.53 654.936 685.763 655.169 687.092 655.941 cv
688.421 656.714 689.529 657.975 690.415 659.724 cv
699.548 675.571 li
709.124 659.383 li
709.896 657.906 710.862 656.856 712.021 656.23 cv
713.18 655.606 714.259 655.436 715.259 655.72 cv
716.258 656.004 717.167 656.516 717.985 657.253 cv
718.803 657.992 719.246 659.003 719.314 660.286 cv
719.382 661.57 719.063 662.894 718.359 664.257 cv
705.273 685.59 li
705.273 697.893 li
705.273 698.983 705.091 699.966 704.729 700.841 cv
704.364 701.716 703.888 702.42 703.297 702.953 cv
702.706 703.487 702.03 703.902 701.27 704.197 cv
700.508 704.493 699.735 704.641 698.952 704.641 cv
698.168 704.641 697.396 704.493 696.635 704.197 cv
695.873 703.902 695.197 703.487 694.606 702.953 cv
694.016 702.42 693.538 701.716 693.176 700.841 cv
692.812 699.966 692.63 698.983 692.63 697.893 cv
692.63 685.761 li
cp
f
351.911 757.153 mo
351.388 756.595 351.033 755.926 350.844 755.147 cv
350.656 754.369 350.562 753.488 350.562 752.503 cv
350.562 735.234 li
350.562 734.188 350.89 733.295 351.546 732.554 cv
352.203 731.812 352.993 731.441 353.917 731.441 cv
354.853 731.441 355.649 731.812 356.306 732.554 cv
356.962 733.295 357.291 734.188 357.291 735.234 cv
357.309 752.94 li
366.445 752.94 li
367.113 752.94 367.682 753.185 368.15 753.67 cv
368.618 754.156 368.852 754.753 368.852 755.457 cv
368.852 756.163 368.618 756.762 368.15 757.254 cv
367.682 757.746 367.113 757.992 366.445 757.992 cv
353.935 757.992 li
353.108 757.992 352.434 757.713 351.911 757.153 cv
cp
f
391.271 751.756 mo
392.188 750.406 392.647 748.084 392.647 744.789 cv
392.647 741.471 392.188 739.137 391.271 737.787 cv
390.353 736.438 388.812 735.763 386.647 735.763 cv
385.201 735.763 384.049 736.049 383.192 736.62 cv
382.335 737.191 381.699 738.134 381.286 739.446 cv
380.873 740.76 380.667 742.541 380.667 744.789 cv
380.667 748.084 381.125 750.406 382.043 751.756 cv
382.961 753.105 384.496 753.779 386.647 753.779 cv
388.812 753.779 390.353 753.105 391.271 751.756 cv
cp
376.9 755.202 mo
374.706 752.88 373.609 749.409 373.609 744.789 cv
373.609 740.157 374.706 736.681 376.9 734.358 cv
379.095 732.037 382.344 730.876 386.647 730.876 cv
390.939 730.876 394.182 732.037 396.376 734.358 cv
398.571 736.681 399.668 740.157 399.668 744.789 cv
399.668 749.409 398.571 752.88 396.376 755.202 cv
394.182 757.524 390.939 758.686 386.647 758.686 cv
382.344 758.686 379.095 757.524 376.9 755.202 cv
cp
f
416.078 742.856 mo
416.832 742.856 417.497 742.811 418.075 742.72 cv
418.652 742.629 419.229 742.465 419.807 742.228 cv
420.384 741.99 420.831 741.623 421.147 741.124 cv
421.463 740.626 421.621 740.006 421.621 739.264 cv
421.621 738.766 421.563 738.325 421.448 737.942 cv
421.333 737.559 421.187 737.24 421.01 736.984 cv
420.834 736.729 420.591 736.511 420.281 736.328 cv
419.971 736.146 419.676 736.009 419.396 735.918 cv
419.117 735.827 418.755 735.757 418.312 735.708 cv
417.868 735.66 417.488 735.629 417.172 735.617 cv
416.855 735.605 416.442 735.599 415.932 735.599 cv
413.124 735.599 li
413.124 742.856 li
416.078 742.856 li
cp
407.452 756.98 mo
406.82 756.306 406.504 755.379 406.504 754.199 cv
406.504 734.997 li
406.504 733.83 406.896 732.945 407.68 732.344 cv
408.464 731.742 409.452 731.441 410.644 731.441 cv
417.974 731.441 li
419.141 731.441 420.19 731.493 421.12 731.596 cv
422.05 731.699 422.974 731.896 423.892 732.188 cv
424.81 732.48 425.572 732.866 426.18 733.347 cv
426.788 733.827 427.28 734.468 427.657 735.271 cv
428.034 736.073 428.223 737.015 428.223 738.097 cv
428.223 741.574 426.265 743.653 422.351 744.334 cv
422.351 744.406 li
423.335 744.516 424.138 744.689 424.758 744.927 cv
425.378 745.163 425.891 745.522 426.299 746.002 cv
426.706 746.482 427.01 747.048 427.21 747.698 cv
427.411 748.349 427.572 749.196 427.694 750.242 cv
428.041 752.667 li
428.247 754.54 428.11 755.896 427.63 756.734 cv
427.149 757.573 426.265 757.992 424.977 757.992 cv
423.882 757.992 423.056 757.64 422.497 756.935 cv
421.938 756.229 421.597 755.093 421.476 753.524 cv
421.202 751.136 li
421.068 749.75 420.688 748.747 420.062 748.127 cv
419.436 747.507 418.406 747.196 416.971 747.196 cv
413.233 747.196 li
413.233 754.199 li
413.233 755.427 412.917 756.366 412.285 757.017 cv
411.652 757.667 410.844 757.992 409.859 757.992 cv
408.887 757.992 408.084 757.655 407.452 756.98 cv
cp
f
436.882 757.582 mo
436.445 757.309 436.104 756.938 435.861 756.47 cv
435.618 756.002 435.438 755.506 435.323 754.983 cv
435.208 754.461 435.15 753.907 435.15 753.324 cv
435.15 736.766 li
435.15 736.073 435.174 735.489 435.223 735.016 cv
435.271 734.541 435.381 734.064 435.551 733.584 cv
435.721 733.104 435.955 732.718 436.253 732.426 cv
436.551 732.134 436.958 731.9 437.475 731.724 cv
437.992 731.548 438.615 731.459 439.344 731.459 cv
451.088 731.459 li
451.793 731.459 452.392 731.699 452.884 732.18 cv
453.376 732.66 453.623 733.246 453.623 733.939 cv
453.623 734.632 453.376 735.213 452.884 735.681 cv
452.392 736.149 451.793 736.383 451.088 736.383 cv
441.678 736.383 li
441.678 742.054 li
450.267 742.054 li
450.972 742.054 451.571 742.294 452.063 742.774 cv
452.556 743.255 452.802 743.841 452.802 744.534 cv
452.802 745.228 452.556 745.808 452.063 746.275 cv
451.571 746.744 450.972 746.978 450.267 746.978 cv
441.678 746.978 li
441.678 753.087 li
451.544 753.087 li
452.2 753.087 452.756 753.324 453.212 753.798 cv
453.668 754.272 453.896 754.855 453.896 755.549 cv
453.896 756.241 453.668 756.822 453.212 757.29 cv
452.756 757.758 452.2 757.992 451.544 757.992 cv
438.414 757.992 li
437.831 757.992 437.32 757.855 436.882 757.582 cv
cp
f
473.379 755.822 mo
472.838 755.238 472.318 754.272 471.82 752.923 cv
465.875 738.134 li
465.875 755.658 li
465.875 756.181 465.772 756.649 465.565 757.063 cv
465.358 757.476 465.088 757.789 464.754 758.001 cv
464.419 758.214 464.048 758.366 463.642 758.457 cv
463.234 758.549 462.827 758.545 462.419 758.448 cv
462.012 758.351 461.642 758.192 461.307 757.974 cv
460.973 757.755 460.702 757.442 460.496 757.035 cv
460.289 756.628 460.186 756.169 460.186 755.658 cv
460.167 736.183 li
460.167 735.489 460.31 734.836 460.596 734.222 cv
460.881 733.608 461.268 733.104 461.754 732.708 cv
462.24 732.313 462.787 731.997 463.395 731.76 cv
464.003 731.523 464.641 731.435 465.31 731.496 cv
465.979 731.557 466.626 731.727 467.252 732.006 cv
467.878 732.286 468.471 732.76 469.03 733.429 cv
469.589 734.098 470.045 734.912 470.398 735.872 cv
475.723 748.983 li
481.047 735.872 li
481.4 734.912 481.856 734.098 482.415 733.429 cv
482.974 732.76 483.567 732.286 484.193 732.006 cv
484.819 731.727 485.466 731.557 486.135 731.496 cv
486.804 731.435 487.442 731.523 488.05 731.76 cv
488.658 731.997 489.205 732.313 489.691 732.708 cv
490.177 733.104 490.563 733.608 490.849 734.222 cv
491.135 734.836 491.278 735.489 491.278 736.183 cv
491.259 755.658 li
491.259 756.254 491.12 756.773 490.84 757.217 cv
490.56 757.661 490.208 757.986 489.782 758.192 cv
489.356 758.399 488.901 758.503 488.415 758.503 cv
487.928 758.503 487.472 758.405 487.047 758.211 cv
486.621 758.017 486.269 757.694 485.989 757.244 cv
485.709 756.795 485.57 756.266 485.57 755.658 cv
485.588 738.134 li
479.625 752.923 li
479.126 754.272 478.604 755.238 478.057 755.822 cv
477.51 756.405 476.731 756.697 475.723 756.697 cv
474.701 756.697 473.92 756.405 473.379 755.822 cv
cp
f
512.673 756.88 mo
512.022 756.139 511.697 755.245 511.697 754.199 cv
511.697 735.252 li
511.697 734.207 512.022 733.311 512.673 732.563 cv
513.323 731.814 514.116 731.441 515.053 731.441 cv
515.977 731.441 516.767 731.814 517.423 732.563 cv
518.079 733.311 518.408 734.207 518.408 735.252 cv
518.408 754.199 li
518.408 755.245 518.079 756.139 517.423 756.88 cv
516.767 757.621 515.97 757.992 515.034 757.992 cv
514.11 757.992 513.323 757.621 512.673 756.88 cv
cp
f
536.678 743.841 mo
537.505 743.817 538.191 743.744 538.738 743.622 cv
539.285 743.501 539.769 743.288 540.188 742.984 cv
540.607 742.681 540.915 742.261 541.109 741.726 cv
541.304 741.191 541.401 740.511 541.401 739.684 cv
541.401 738.176 541.052 737.161 540.353 736.638 cv
539.653 736.115 538.531 735.854 536.988 735.854 cv
533.049 735.854 li
533.049 743.841 li
536.678 743.841 li
cp
527.286 756.871 mo
526.63 756.123 526.302 755.232 526.302 754.199 cv
526.302 736.967 li
526.302 736.273 526.329 735.684 526.384 735.197 cv
526.438 734.712 526.551 734.216 526.721 733.711 cv
526.892 733.207 527.132 732.8 527.441 732.489 cv
527.752 732.18 528.174 731.928 528.709 731.732 cv
529.244 731.538 529.888 731.441 530.642 731.441 cv
537.772 731.441 li
538.963 731.441 540.039 731.511 541 731.65 cv
541.96 731.791 542.89 732.049 543.79 732.426 cv
544.689 732.803 545.437 733.295 546.033 733.902 cv
546.628 734.511 547.105 735.301 547.464 736.273 cv
547.822 737.246 548.002 738.383 548.002 739.684 cv
548.002 742.419 547.114 744.485 545.34 745.884 cv
543.564 747.282 541.042 747.98 537.772 747.98 cv
533.049 747.98 li
533.049 754.199 li
533.049 755.232 532.715 756.123 532.046 756.871 cv
531.377 757.618 530.581 757.992 529.657 757.992 cv
528.733 757.992 527.943 757.618 527.286 756.871 cv
cp
f
554.365 756.734 mo
554 756.491 553.732 756.178 553.563 755.795 cv
553.393 755.412 553.328 755.026 553.371 754.637 cv
553.414 754.248 553.523 753.865 553.699 753.488 cv
553.876 753.111 554.131 752.811 554.466 752.585 cv
554.8 752.36 555.17 752.221 555.578 752.166 cv
555.985 752.111 556.438 752.212 556.937 752.467 cv
558.991 753.342 561.039 753.779 563.082 753.779 cv
564.432 753.779 565.534 753.543 566.392 753.068 cv
567.249 752.595 567.677 751.871 567.677 750.898 cv
567.677 749.622 566.741 748.674 564.869 748.054 cv
558.814 746.048 li
556.541 745.197 554.937 744.258 554 743.23 cv
553.064 742.203 552.597 740.79 552.597 738.99 cv
552.597 736.522 553.575 734.554 555.532 733.082 cv
557.489 731.611 560.134 730.876 563.465 730.876 cv
565.045 730.876 566.665 731.079 568.324 731.486 cv
569.984 731.894 571.245 732.499 572.108 733.301 cv
572.474 733.653 572.704 734.067 572.802 734.541 cv
572.898 735.016 572.874 735.447 572.729 735.836 cv
572.583 736.225 572.373 736.583 572.1 736.912 cv
571.826 737.24 571.5 737.443 571.124 737.522 cv
570.747 737.602 570.37 737.563 569.993 737.404 cv
568.874 736.784 567.862 736.355 566.957 736.118 cv
566.051 735.882 564.972 735.763 563.72 735.763 cv
562.894 735.763 562.134 735.852 561.44 736.027 cv
560.748 736.204 560.164 736.505 559.69 736.93 cv
559.216 737.355 558.979 737.872 558.979 738.479 cv
558.979 739.258 559.304 739.881 559.954 740.35 cv
560.604 740.817 561.562 741.264 562.826 741.689 cv
563.118 741.799 563.583 741.89 564.222 741.963 cv
564.859 742.036 565.331 742.127 565.635 742.236 cv
566.753 742.577 567.711 742.905 568.507 743.222 cv
569.303 743.537 570.078 743.923 570.832 744.379 cv
571.586 744.835 572.19 745.331 572.646 745.865 cv
573.103 746.4 573.467 747.042 573.74 747.789 cv
574.014 748.537 574.151 749.379 574.151 750.315 cv
574.151 752.893 573.172 754.932 571.215 756.433 cv
569.258 757.935 566.607 758.686 563.265 758.686 cv
559.459 758.686 556.492 758.034 554.365 756.734 cv
cp
f
586.949 758.083 mo
585.575 757.683 584.375 757.093 583.348 756.314 cv
582.32 755.537 581.524 754.53 580.959 753.297 cv
580.394 752.063 580.111 750.649 580.111 749.057 cv
580.111 735.271 li
580.111 734.225 580.437 733.331 581.087 732.59 cv
581.736 731.849 582.53 731.478 583.466 731.478 cv
584.39 731.478 585.184 731.849 585.846 732.59 cv
586.509 733.331 586.84 734.225 586.84 735.271 cv
586.84 748.947 li
586.84 750.527 587.299 751.729 588.217 752.549 cv
589.135 753.369 590.226 753.779 591.49 753.779 cv
592.767 753.779 593.866 753.369 594.791 752.549 cv
595.715 751.729 596.177 750.527 596.177 748.947 cv
596.177 735.271 li
596.177 734.225 596.505 733.331 597.161 732.59 cv
597.817 731.849 598.608 731.478 599.532 731.478 cv
600.456 731.478 601.249 731.849 601.912 732.59 cv
602.574 733.331 602.905 734.225 602.905 735.271 cv
602.905 749.057 li
602.905 751.136 602.41 752.907 601.419 754.372 cv
600.429 755.838 599.088 756.923 597.398 757.628 cv
595.708 758.332 593.739 758.686 591.49 758.686 cv
589.837 758.686 588.323 758.484 586.949 758.083 cv
cp
f
623.629 755.822 mo
623.088 755.238 622.568 754.272 622.069 752.923 cv
616.125 738.134 li
616.125 755.658 li
616.125 756.181 616.021 756.649 615.814 757.063 cv
615.607 757.476 615.338 757.789 615.003 758.001 cv
614.669 758.214 614.298 758.366 613.891 758.457 cv
613.483 758.549 613.076 758.545 612.669 758.448 cv
612.262 758.351 611.891 758.192 611.557 757.974 cv
611.223 757.755 610.952 757.442 610.745 757.035 cv
610.538 756.628 610.436 756.169 610.436 755.658 cv
610.417 736.183 li
610.417 735.489 610.56 734.836 610.846 734.222 cv
611.131 733.608 611.518 733.104 612.004 732.708 cv
612.489 732.313 613.037 731.997 613.645 731.76 cv
614.253 731.523 614.891 731.435 615.56 731.496 cv
616.228 731.557 616.875 731.727 617.502 732.006 cv
618.128 732.286 618.721 732.76 619.279 733.429 cv
619.839 734.098 620.295 734.912 620.647 735.872 cv
625.972 748.983 li
631.297 735.872 li
631.649 734.912 632.105 734.098 632.665 733.429 cv
633.224 732.76 633.816 732.286 634.442 732.006 cv
635.068 731.727 635.716 731.557 636.385 731.496 cv
637.053 731.435 637.691 731.523 638.3 731.76 cv
638.907 731.997 639.454 732.313 639.94 732.708 cv
640.427 733.104 640.813 733.608 641.099 734.222 cv
641.384 734.836 641.527 735.489 641.527 736.183 cv
641.509 755.658 li
641.509 756.254 641.369 756.773 641.09 757.217 cv
640.81 757.661 640.457 757.986 640.032 758.192 cv
639.606 758.399 639.15 758.503 638.664 758.503 cv
638.178 758.503 637.722 758.405 637.297 758.211 cv
636.871 758.017 636.519 757.694 636.238 757.244 cv
635.959 756.795 635.819 756.266 635.819 755.658 cv
635.838 738.134 li
629.874 752.923 li
629.376 754.272 628.854 755.238 628.307 755.822 cv
627.759 756.405 626.981 756.697 625.972 756.697 cv
624.951 756.697 624.17 756.405 623.629 755.822 cv
cp
f
534.471 332.946 mo
523.382 332.946 515.251 330.218 514.415 325.531 cv
514.09 323.706 514.905 321.777 516.637 319.875 cv
519.494 324.271 523.734 327.687 528.739 329.506 cv
531.33 330.453 534.13 330.972 537.047 330.972 cv
550.47 330.972 561.351 320.109 561.38 306.693 cv
571.092 307.098 578.011 309.751 578.779 314.054 cv
579.944 320.589 566.48 328.456 548.707 331.625 cv
543.68 332.522 538.845 332.946 534.471 332.946 cv
.356863 .101961 .0627451 rgb
f
561.371 306.639 mo
561.371 320.072 550.481 330.962 537.047 330.962 cv
523.613 330.962 512.724 320.072 512.724 306.639 cv
512.724 293.205 523.613 282.315 537.047 282.315 cv
550.481 282.315 561.371 293.205 561.371 306.639 cv
1 .635294 .258824 rgb
f
520.063 299.806 mo
519.384 299.806 518.818 299.619 518.421 299.222 cv
516.928 297.729 518.395 293.842 521.697 290.539 cv
524.121 288.115 526.862 286.68 528.738 286.68 cv
529.417 286.68 529.982 286.868 530.379 287.264 cv
531.872 288.757 530.406 292.645 527.104 295.947 cv
524.679 298.372 521.939 299.806 520.063 299.806 cv
1 .752941 .356863 rgb
f
561.38 306.693 mo
561.377 306.693 561.374 306.693 561.371 306.693 cv
561.371 306.675 561.371 306.657 561.371 306.639 cv
561.371 300.12 558.806 294.199 554.63 289.832 cv
554.627 289.824 554.623 289.816 554.62 289.808 cv
558.813 294.181 561.38 300.099 561.38 306.639 cv
561.38 306.657 561.38 306.675 561.38 306.693 cv
.4 .105882 .0431373 rgb
f
537.047 330.972 mo
534.13 330.972 531.33 330.453 528.739 329.506 cv
531.331 330.448 534.129 330.962 537.047 330.962 cv
550.463 330.962 561.341 320.101 561.371 306.693 cv
561.374 306.693 561.377 306.693 561.38 306.693 cv
561.351 320.109 550.47 330.972 537.047 330.972 cv
.356863 .0823529 .0392157 rgb
f
537.047 330.962 mo
534.129 330.962 531.331 330.448 528.739 329.506 cv
527.766 329.151 526.822 328.735 525.913 328.264 cv
526.976 328.404 528.04 328.465 529.143 328.465 cv
544.449 328.465 556.867 316.047 556.867 300.741 cv
556.867 296.878 556.068 293.196 554.63 289.832 cv
558.806 294.199 561.371 300.12 561.371 306.639 cv
561.371 306.657 561.371 306.675 561.371 306.693 cv
561.341 320.101 550.463 330.962 537.047 330.962 cv
1 .517647 .160784 rgb
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 20.1.0
%%For: (Oleksii Bernaz) ()
%%Title: (Sweet_City_Logo.eps)
%%CreationDate: 10/4/2018 1:04 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kk?BE-e+``bYA=.C0I)15K9<5`$4>oT^^qb"%^9TlIX(kc\#OcZ"p>h4h6VXTF.V-?U,l7teZV:u_s2!TkVe@LAiX>u\`7*\
%!L@.2&,F-@rnH`'EV34J:Z.'IKl07rFu#pld+drd;)c_mN[O[%CO4:5145gAmdth]pu.(Z[6b>VKTkCgU0?.^L=sp7*\#/A,6'tJ
%?aZRBFF^P$?%,@'J<\SG*LI''9uak/ME$C0WStUOLJ,<cD0J[U;`1">5%G*M-/*KBDe\hGk\S;W_S6QTckFl$>.<@^@s[uVn?V*G
%?l+8f\qQA,BdLS\/G[=gs6)OFkn393!>b^Mch?lD^?.Pj8"emQ1,0c$UC7dq&OcD]ZPp%i#!g<8R3\qC:2dN)>"9s0,r/.joE=B-
%S8W4UfE9"3Z##M#4962r.rub7;=HdNp^\TO]_u]us/>3IG!*gV<n'iZ2oB5T>Q"qQXf!/i#FF8XDI,3$*EY:Xcr@RkB1>b%"+S(<
%6sV%,l]@>.[5`2q=k5[-O%-g@40dgCHD@!S)_(0PNdA`LK;;^t1M9sVW<OW>$h>L>H?_mfnrh.BR%P]rZA4]FpqmA"DB4`a_gbe6
%Z)..*fH9g!O!E\&AO%irB!kl\m]`\k$`6O^`ZCPu@UEPP0bsP?8/,#Cs&8=b=VHR%k]HHo/IBV67*cjQcNMS"3-;f9N#E/\OZ'q5
%JC6Bm*pQ5JqR$9WHj3ku>F$gnn8`D3K5)&]rr'<IqO-o;WH[==,LbkbP0K0[qemG4U64%jWG5B+cjr;#;kI]Tcnr*#__>lq2HeP;
%^0(]KC<JQ0dqhbI'Iq#V>1C=9n[2]e(a`p,d?Dkj_&M_E6,\sC[/rl-ms@073eUcnD>BkWH#*H39m],BR!cXN8rYe0d-F0Ed4sa(
%dpo8X2)V_LB_F(W!M=&0X8OZ5;=E;Ol4[./"j95Y);LI5%$$Aq%+Xcf4*ifI\N7UPDJ98VhJ0_6DZC[?<Bugc_5ud)X_UDl<5>^$
%c!n:D8c#m1!4XGAk"7"N2Y'>Ng2?QZF&FcdQ.83,ci.a)FBA>ReNg";WO45+JgY#NgD*N00^?@.7ss0_\aqWJ&[lel/03P_VOM[U
%5)sA4$kEUt9\[e\BY@HA7Y206Bp<FbXN[Ut#!_C4A!(DC'RQ&(`@Bg2)#X/n-i675i(mAE'+>VB\Q!DI:jB;%C.IaIP0mrO[-Gb6
%[$FJ2e`P*L]+eVf4Z_D++>D1tZ4-[cH[Q$!e\T%6]D($c"7L-R;WeV?OOpaP!CIRGr&N`2?-gN_NHu7%%)C!ckQ*F?ODP#.fJL!E
%SjK8W0:I3NE,_E9,iF(=6i>F/M.4AX)pG>.Z^le&S)lr%5I>agiq[X(92fV&%NLq_Al_@qksC&qdh;a+@2D9.W"qH0(P5b:ZRnj>
%YEg[Z(Xgrpdh9\DJY==#SLe!%QodlP>R3=)4Y8,#ad6t[<RG.*al6<Y/u1h2/U'"B2,*@Ybrk'^c%8-)/SM2AX3p6\.KVJeCo7Um
%F0[cB_M8H4)pKD]Sf7M3)0)riH*+1r9`;X4gZlcr%.R+d3,Z$4c#+b3k\,IUg+auHZt)MpROjc(\%?cArkW2g#r^i+b^MJ5ab[.`
%-@pn]cC_<<$u\bG3DL_&THC_AV-TIT9G56Vl)"ZAKaV&[XO@e1CNRgQIRLMh2d>?XLSerB,R8+KXNZC/r1[>UaD:>L[UXX*Zb&ci
%AjV/>.Q;.[/5j%39]^pr.T\A_#^>Ut7^]p#k2mkUF&@FSdp11P3A,?_74u'jjVGD^,+&1fkAgUk)e=$XKUDF[:A@T[S1A%1-D,oa
%-_gX7f<Z3oB`(sP?.f^BUjrEGH^WE?\_S^SoKTA:)Qp+da2pLs\aoF]3);EP;=fq$D7?QL1GW:JfoDP-W*@Z/[jo[HP$)l?2AE&+
%2n1Z)R7Ap*<,1`i:TRubD*:U(RnG98A'BP6q$Q3[+?q@9o9KDAo<[k^2JDVT9BTR8KP5SSP#fr9"jNT'"7-Cdpfh4cc1c=(SDF*;
%4IAl5iBlKgk\aZ^UIMTGd@+sKqUf=nnhKP9N;qQdRei?Rlo1?]KEJt;k$j0Z]i'Dg7<9WlN7TN\S3&J)EZrG0;i`Xg7^^o@\LU*b
%rOQ]R/Q5AHEPl#c4^Y8u/5?C]2DY&Ga#N[3at[Z;i5.(q`W^G/bs8-D%Q8*?TW9t>jDqR;j,,eu1'k5"&%ii!pc3l(3Uhcl=m]0,
%HH49unm$IZ?[,m@V:nk'I-Z7?*<4ULc^JeN8u6`<mW=u`Am*0>SBGTd]qKl#rV34q=PWKCa,4N1o3XP"FerWg$YM$&\E#G@RV?."
%q9OG&,AJ(gLoK]i\N#WIme<+$TSm_PRp*)NFgJtDj0U_R=N+q?IEUF4]3I47+iE**ah$/dIi(D!=hJI9XU77bcp[phK5&C.`b$:3
%^&rWYU9@tLW[nPIqNitLDf?fLeJI1Vh7R$`\'0n]:Z5Lr^WO@Tp_N3Tr*m;hc'icZs5r5,G7b>2l*pOqgq95jDtiGNA1r#aG[(M1
%090\j+&FZZDMSt^gjVCpb25j2UK"RLJ`L%FcFaOmRNJnW+j=$7C+;PT\iAN)<jZI;Y@mMhq4.sRLRfNU9M<+(MhB?ZbP/9`PeBem
%g2>HKJr[SiF/HA-dcE;Bkg%/piETnSrEj^<I!EaC]UUN,H0HXu[2ETq&SKrj\YuLPO,oaH!sX5i`mGkIq[=`^)rFof`N3:!RkKuN
%jmtZ@'F3d@l<O\eh63`@>[Gl.Ol%[1Es&C*]a\fs9c'O;KgN8rrT!t2.?Ka=>%24=+55%\J^'kHFYqRDj\a<;M'TYDVs*:%4-XMq
%@^l]]%6$S_0uX^Z`E)'mZ7D8Wn]e;i/X])G%?;%/C!#<X1iVHB4nq#L?o"MenkVp"HF9_f0"tpqd-:f4m9CHjoi\1=Pc9lCJr<>R
%(9@5RTl0S)a#_bp6>KU@Y'fB_YF<9dGVE>e=klE5M$0sMSSk13&S>@l(Q4b2ZW*Q>V-1-BlehUeauB=I5W@"?S%H9\L$s+"`JlSC
%id0bb/rGS6E_c%s\5K?[^PhY7S7geBh*l<.bi17ti\&BgiGB?S;._B2R;`2gHeq22KnqPRUV>2_'K<nQ911r3G>VW4`N3:aGJ/o4
%peH$1g^#\h<rYsed`gaB)HV:]"k8q%?I&;_o3C,@>3s3*4e,u12WC(K@[]+J<mNE--XU?DR4p;oE.qsHrKj"2hr73l;h&3.\,5^W
%00WrZJSSW/2/.VW/s]mrCC=BOi7_Go>208',$b"OiL5dr\j3Y,Wr9D(D%WjtX'fdqC("#<:SXBM7-J1hkM*>O,VGD@miKTreH+UF
%N4s1!o"p>j/A]2^(1oCr1Etik?!Q<_6=7=8_rosK<]'NBq.ZNrohW8mWG=_*VXU.s=jpq\D]!!!69];uDlGXQHE#U<s21<.f=G.s
%eqpq`5_t&:>,!U?9/A6IV.&1B%:p"j9_45bl8$Hpci92*g+@[fb%1#X:I9%b$"Z0mi*ggi`l!]'QgqlkG2Y=VG8EI4r0jgC9J6MD
%aqJ,o/N!<1^ZkJG,eDI8TBkct`olIs^H6H7Mq@aej+q1,^JR01W93aeaecu#3^+@=7a#I4lC..$_l:D-B@@!8W%Hh1U4A/2?Ys%"
%agi;11psR:Ka_k7X#<E5EjH;:cG]uu&8$82`a-V'OFa$q$t"sPBAP"NB!kQOkT)T7I]e(Yf:9ugq8cq8nAT>),j4\?ier.F2j](2
%ht1-Cs";THBCl%F$4e2J2-jOYs";THVg'&a3<*9Ss";THs1X/E?c&2"o3W+niX%<Zm(/-$(MCH<>1oA7HHG0jGB)cW3:m)h!9[Cj
%Z7[5Q5/9=hYgc*<=tQ#ND*;Vj+bXaEZ()=VVBt%o]j<XH9GXm>/QY!K&1HIH79rGDggFkoK*s*rRO&6+ghPpnqi#%BXF"-o&AF9*
%E\5\56Indb(DX5EKksU0RiI<5PFq:A7MR[[ERCLS[O@@<b7X\jg!o]W/jtQm0)2Sag"?7uC=Mq%Y,N4]%9%&&4kF#ic_^a1MMlMP
%p/eZLm>Uoo`;qj'3N&^-Opc:%3kTN:5BH<h\P*[;P*A+`^d$A].5@9)Ub!$5QYI%=oSmVsm%X8/e&@)c9.rPr@fEZO%SZ+,h1aE_
%P(009q6A%8S!>kcpn'-/DndQ*^WE5>Z7*@:$85a$CJf=Z'ODQ/QUTlp^K,Taat0ph@T?i-rFJiNRGeQr;0_n/iFR=3s*a>2bY/$d
%CF))a>s\=)?`F!IO.#c@O_%BFRO0f7pVS?54<S%_+#`*?5n/a-:!A>#Zi708pD;4hh^a01#>P-5TCS@IXPV'4eZnf@Kl`bm5auoZ
%\9JY8CcKK(n0FkaAgIfi3Vs:tDLCL(#u'7B#u"^Yf>Z4*(/J;+QC@ecSl:lUBLUt%i^[atgUH`Z4EYE/Xo+Rn$0M6Qln3`8ZKU;7
%8dWtR<6L70j8?]C%"HR6H-ABs)5U58n";P*HI4#ac^W1WM2_JR*8l>"h=$a?bhC?if,r1BA8'jQ6OU-Xl=:?Hj0,BEY2'EC-?,D_
%gr'PY$R'suMlnZ9>'s6^L3Fk97<`r!XiEE/5jCR7a&kH?q4#nhUdZ;6NcLT!Y@B!<TT7u#L.*+mAi&7gZh[$1@o::6[@LIM0c"nj
%3N6NdG;?Ock3Bt:GL+T-VH2noolHnnk.Wim2fV!,h+pJ8_EWF;B1bseaEFSS_RLN75f/A*\SBsN[uL^'V^3;rFR^?<][kXIVZ,H&
%Rft`Bc4L#_A97>NT4YQp#-7X=eW)YXVe/gZ.TpiaPU/9*I!=4M4D;g$U+RKDoP;DAL(>4!0$bCB](cH"No;;j1hJkc.%*QB%CQkW
%Bh@;2$<fPBBnU$sJS-9'YP@^S`s2LB_G@=Mk.>aiMg6o^/tRMI7[E:gIEbc\0IN^NYC4N.;(-Q!@B@cQFY>Ztbkbm(juZlBE[Arh
%ZBq?M0G?q_rBTFTgiqr]6^=LnUp+[lNYB-P-(aqHV0EeXO63SXO66-6DXAuq\IT`hOj!^h<jTm0(>7IeS"''RBT^OkZFPH4Rr]/Z
%J+mdI)dX'Pk4tO*k=3[03p/i8767nKk8*=;,+Vr6F8tKH0#2pgK[-,"Z_#U%h^PCC--RR0S$eLK`\<9];fgt'^O&0=h0u`H78C(3
%+N*idEoHQsoQ0RZE-)%aM8f'@(XJA6_rjWc;7Q&s?N84O18\!/Y!X=%Il2O"?e5Xm>n85!/Zhk:r7l9lrG6\,f%j<)/\Yr`S]`+q
%Sf9b3.F5Yo;$%JN0!4>eHVVeZa>p:*Z\T*gLh^etTZ?9j_RB:>]fao]d?H4rXoa.TmV+,=$`U47%?29#ngig>EhD;+dus,h`RU=L
%ldjCQ#<p$pVguYoVBqjmRj@C(=jdYg>GW<M?R2k*9+9Fe[lZNtao*juJ+J7NbIauAmB:9"lfnVQa#U8]Q!?FX8?]omQfW)in$GJ,
%+?bEko),NW.97bO2!+-BE9gS#KRc>1Ee8?Mbq1,l7:\)@D#2S@%F7aji$+Sn"ognInZg3cjE'9*mFfMZC`,tG9*4gV/:sTb;"P-J
%U.%cJO&%$:g$i5O7>hPr1L@]n;V82ZJel>n?Ppo8`pl#I".?$_?7qalbmf?VVMJVtA/KML@6b$*[Ug<MJ=?QWq!#oY^@"#Y?;WMZ
%SOu7noeQbmjW2+j-00B[PL6C?;ojZ6S7+[PFm%u._(V>=D!]'@43'!d,msr<q[R2r)s?*;c=7$'nRI3X)YEqGm$OFDpnb<a99&_$
%cg^a:^FK5bT1JUF+#*RDJ*Ut2_gCN*At/As'/_W1cGa93joWG'%qGPWor:NM/1l/3`k$!+H*FB<G?RM`])Ba9ZoLS^no^P1cYRI,
%@H)W&8)NtO+2@doERV:g\UR(<^dZm:o+/qKI#"V1r44B,<5_B.9AbMqVY/:*6RMf!m?rU5P&GQ`mL/RJbX2FQ-(r9>^?*gokPGn.
%fCih=<K2.mbK+`B:HLMX`O?0:c&1XIT`/hZI9Y.E7+If:rF=E%\>/0Am-\+X-TR6Gg--,Dg26Y*J:#FPP3=e3QZEHXhatqAZA7st
%G;VHcW7eQ.N;```(7FIL&<c&2=+YLjeng].r0"o*lMR";jY*VTZQ4;973#%0DRtu&U@^0TGK?&YE4s!,E;ipe?!OZ42-2>Yd1!ba
%,=nlo,g3j=S&O6F+VC0!UmH.tR=S\c1PPrH4ee:D:$3n=s*!6CT.0E=9YCg`e)Z9e?p`hHOk2`.ZeMX-cEsHLekJro/A`ASIH[As
%7^[QU>,Dec@a,c[I2i0/$^D;GDu2X_CI0/^i,jF!BOg1[&r`<Rcal0U#p,C@aT(`O8+-iao@$e*B48-1`<V"(_&Q7?`fDHlLGl[T
%DAl4[bE7.3kFa->A@'fUX022a(f)(M0L8]N"AsjhX=>p(8FJYE)*qj?<KIrHB0E^BEne'sDL^ZX'6s0SZl^EskKNPe`-@0S_hXSC
%osP.$P+1@-Rf+>n)DtZKi?li-a:!SL9/%_^iE6q'W$3TD0]etK#b6Q$";HMf"dVM!5R'[QKl__D\d%T_ai-SNf?*M(SIc8GPZ3?H
%+R'A.Z62[tH\kh&9JWdY4FY6>1+.rI0NOFZ<cOk,H>^W-P)C>6(XX_Z7#+N3<mHY)f/k"D$CAl01brkY`tE)c:abgc!?,hj_[<,S
%c#r(*&pe589N%R>eK\l/(Tuu[#J^;).K&REd`@Qa<iG]&',cfRh5MmMb6k6V/+<V$0,U]mU.cIm-R,Q(;BuH_JT_jc(L_U`dFRd[
%):.P2o?U,g\rU.O*Q&G3f,o*Jj)Q6R3?iqtpijRNDmKrAei2Ke9V`1-4nJ]B]1RWs%j:%*oV!i9UN_CdLO>KffuP+Tm-=U2j.[^^
%\.Pf6a,E?oTf5%fXTQbPqQarO&D6O?5a2c^7g^s0j7*.-0_[p!J#f&gBU!M!n*8)oREOm=``f_InqUhcG:07>^l0@//-GTXdiNlu
%pIgdT2Xr.,-f7&l?<GXWhDls!iaTHglru7h/-LWi1KiY:)hj_EnSrV\-8t0SW>'i3+[/U1='sbMFVX6!Xt7K8mS83%^CCT4J%17;
%jIH`+7l^t5G/n:?!;udn(#<S>Qk5r%"e]k=WW._/A1-7@rO:t]]hGtBqCr*K4U4O7Y#c"g#K@Y-p8+qB5ML.$Rlr!8*IotoZ:kqH
%HpMB6F%0\\-'G;N677u\rtP="M!",<dE*pZ5E%c._KiR7L@L[BH(tI]77o4UdUomLq8e=bk$t0S#pBR4dShdhj7*'c9R`?#n0AZ3
%8f2/-S,A?_i%A$qqPW,$MW&*<#m4R)HorNZ7l/>7#@]-`kd6O.=(6VpoW9SKb6d`hDY+$S\tacK$\F!=k@C1krKn"T:#kSU1(H40
%#q;-:\2kboHWR7L477]`*q)eD`_>/R]ogp)a_3M@)Mh1lAGjed:1S407bQ;GmHPe]j;d*M#oP*pUs\I,)qD].QLc*O1EkZ:?k\$<
%.,9@2`LY=tZHl2]2DNALGAAOX%XTP"AEbC#]Ul*Z[7`_r@NGulUD:2^\8O'NAMWQ.T$26&3mD_WOq-nGg^Y]3:J5KfVPd^:FR/lY
%*VL9X=Z!IK2`.l).6)nb7jfkRYt+:_gBR;FHh)<MSGN_g&9c[AHeg9u`93,*b%A$eU]8l^qdBWo!H>Y^Hk69?^C;L%A0Y5M/)'40
%1Np]BCfQ*';6WS6bm.Yq>.`?m\8]k0mWK#bV:P(uAq,sf-ZI5\"nHURZ\S!ZQDrFl$8nU5!Vq^mbMndTOVc&^b6#$,;kf+ip_%Y^
%Y?V`Rd2-[EX.rmB?m.;`j`U/*h36=fm!.O/C.HHK*FTp<nI"1>ffm$.C<\uMG.,-t4ms,blZs-n!7q]:l.ZC[ZZcH\pss;-&p9.k
%S"T[i1*)G9+L0NO8p.#?.m4Ui2WD9s6-["OEuAYQmWMd<[?I(^idI>$8o'a)>$:T1N)i_;5%\EEKFK7V9*un8![D]Zo6Vtc4Tca#
%O@<"Y<F-a)E@MB9nKMI!3Op,6$5ULNT:^mM4tQ9)Hm.<NT$*I0-J\V`'?tPCouL)?2;S1f,a'8VMElog"\HSUVU6PkfhS,OfoZW/
%1KmQP'C?<kl:,*\?g=b2]fe\p8D?e=dlCY,&X_ZdZ2f@G;-HHZ6hlXB6p.<;3WlJ5X%hF!m[-JG(MZ\(mXQI@@$M_5>-h0#!9@m<
%T7XuS/T\do]q?72-`-j:f124Cm)aET/WB9a2u&T4T(F,9feTU'#N]'U#V#4&Qfb(B%*"E4]md&*^ntL_\s\MbaiC/dc5poH-tmbA
%J,sO87h3kUE+jTJQ/4nb\qs49mm,lQ"<Qralt61A:>b;b_Mku^^q7Di5pkgFeQOr#kgo&X9O'pq(oVSs=qo2mG6J79g;`#Q1s$QY
%_JK:bp8S%4`6L=WULcg"@IMJe<@ZM!/V&:41Aqm!6lBk',M5"\QinT8J&#ND^Ao5#a92Bq8'*)q4B);VcL=6.=k>Vg5+J:Z?F=oO
%Z@PQ9mH.&2]f7(.L0Ba5ZhPOFXlHsk2N,S9&^)uSGbu3>Y50j$<O;P""*]JaY7<V9_1&+Jl_c,)'l"Re1j_br71l*\4QRWII)lCN
%qb8sVoe'dS[qD+Kl_F0^(`R"n5B*8`[BB6O:VPE3p,F$Ol`uX##OsNT8Z0r]o;-%W=L2nC8=T-mPk1_P_M<s!9e4M,-%)\[oY38I
%s0lU7h<\p_.Ds=+M/I]k$fm@k>P2_3Z\j3qLgGX=N3Uqp//k+tN1])S_i3:9EU<t;pre;H,NYHBc5o[TiaCegCLTY>N870DaF;e3
%Z-,,N8U)cil.7(J6.0c@/Ce5r+Rf2]_.=WtUu)e%3#*&i@rH&bE44\D4.q1J2ZqDBnOBSN1TK'mm?(4(fHqEH_)(:bk@*bUiZ8sd
%L`UAf:tK!sMh(bof#mY9%@dfL%#Y>U!omp)GmTj=_m-['QM9$^4NV8[H4.AIP'sEIQ=O.\=RkE:I95WPSq)dPMd]@W'Wj/@P8r,)
%3mru<]1+JhoD5^]\GafFmuH^\8GF6u1M(Y`$qCF;PX3e5[W:tG2\:o`%'ulK7kCZQqqUBDIdRUX3DVVk=Y<8cZ3+fq/3;86GU@4&
%_;!Qu`et8DGT.0+HEl1@33qQlhb`$eI8%`4*JF[X[V(olV_mc0XO>!P/c24\Z>remS@omJB0Rre-bP)b'UFt;N='/6eZY$.?3i=1
%BC!>oX*RL8+1?Nr9bN^q?_2GQgLS"+q^).,G,HB4ddKA]IX@dZ^mE10.6C`LN-\bWj#Q6`RM?'A[>GDaF6h'OiBEf.X#L5r"2d'L
%38K%43N>#GZ88(=j/6/cgh:%976J\:<+8j!$?/:SS;>hQGrR`pN(-$]+5N&^1tt;*M[bm'kUkThJ2Ft;^h2b6mG[R""/k"o%'_dK
%Xjh2'gaTD4l(>(cF22TVF:K9[X4[A].tOI4eII%9l+gt,lE4Mgib2,T&sb\f6$"'S\\M?%RUC4X>'R;6%<CI,SS=?.2,mpN.d$uB
%d;)7^l#o.1N#C/c_(5f<p?Pm4pr=cRKiPM)B;.iCOo&0;C8J/L!JMN4jKLD7;s>H]W/<lYj=3HncIGbp2CL$73!V(J.7%Mr,KY^n
%FhQ<#Cp(:0AeeRP1B<m!D5X:r)h<jN]gY`rV^H(C^h/T]%;bC8%8i7>r7L\8UR4eRGqLL;TC^N)Eh=i,n7$maAQTHhT"nEIb;U.1
%IbY=l+pUW10YJA"+Rr.FTT+n@/F)V;\`qo&;0^RU12l"*)aD6Oklg`VkGP`ZeP8JII;3uI4TR3U9H/%V`eWo+R'd_BjN1J\-Xhg6
%%TXpD#G>/!@[MZ<$f3,]8E_e&n3(O-*b7!8fuT@1h(r(q!C=k.BXT8h6+bLD(Of+el;[(t+#+@t5?hBEpMET(-SZ(Alqb8!kYnD5
%RG;5er7%\YSikTc-S`"/G,ig8BE"7eR?$a\:RiE%ApMX;J%!Gs.0BDUU&60REtF-SZ1kMP2#JP=6SiNF0/G[;iduT10.SnA_.()h
%QAgkn[UHmn2rFTc;Pnk&Y\mund15<>QsNlWr+M\5j+qC0VRM1P]rZAQ(W+12!=X.mQS1R9C66fIYA!iIn,V<g74[Z#m`>/mZ=.Q4
%+gOQlf`EVQI*MneEi;'F'V[pe3I"HM^Z@/fAt$VmcE'![[JYSu%&;p&3ZiG/@7K_qP>aW585AYqkR+<0*&Yo22EDEFN7?AYp24)q
%)$P'OfQM1_",#t6DE2,$*Oa^I*+t&Pdp5jGq<X2[T\bhNG>O2TMc$m9O-P^PV41%6JT3b]Jdn2dh(\_]B;8KF=kg?!$\FFOD#tf=
%P3SY_"0u?@@8rA,R*WL5!qBcG1,o%]-g.9sg:ascmf&'*:P'7%m_,qr7^i#s&t*g%`I?2f;uKXuB6:JUIo**YoO_2%H=$k!L2UEr
%Tq`Zs=qS([O4GjcQX#9Ib5mZIWt[#nFAH)&gH-K\%?<kWm`U71AhHRMHhV2CkkW4cZ<m!_L]hn]Ijo5odMQ6(9J#^sm=6V`3p\9F
%[TR[KenXl]]AtH'3.!J\pH[m-Yu5dAgFf?&W9?rOS"?-`9b5D)UEqHa&kn0F=rT]%:CMk1H8j9(UcdHV6aUR>JW>3u>u(k#dUP*s
%HEi@"OD3':b?D=<WA\HPO(8!o4>:`XK-k!+Vdj+)"l3*'PtB5!f4_dgGTRD@->.aOAZC_c/^s2k+\%X&IV3b5CHPE1^hf'/l;+A4
%p2lc]I,\.FbeDbG$p>ENC2:c4a!#>OE*J@]o?Cd-2$7T[r&jh`=ikqVA0@fkbBp4Tcd:j&k5K1'a6a`\4m1%(_qF^MFWe>,0C4Xg
%`haoMrN,1\'r$9(]ATR<ri44=PM$!!S27^D^mk0_VRCa`J@@I`rjo-0pag7Y_UY"#!M)C1RF*hu("6h]SFWFH+&VM>K0R0eH9W#1
%7Q!9Y2bFXo1'Uk;:D^'L?f#nWH(72f<,9m.S5juh14OVRm'FMu8Ujq2?Zg?qO7)CBn)bNO<,hp6aM=ul"JiJkJ>n()r\2Q"A5]'\
%]RXG3[I[QLV>\og:LhYS6fpR..EAm/S<R<>D<W_]_::G4qam,aT7i>`LpM5RHc_sq3,eG0^sQ</!1\LI)B:]U4@cgY0X`g;m:^dc
%,b"/)$\&YTKB$8HHmS4Pe\[rAq$]d3Z1E-[0Db:J*ZY(;2G\!I?K0)rqoN,4(Tg27Z2G)PXY%EF)<X)3[@]r;A'irKQkhWkQ17'J
%$M,j4_JQRaK3(]Gh>A8C-X85%d[7HIM4[ojW^.,**-%fo9XG%BMWj=A(;kI&kKibGWt]u(-T)?lV/dZmqYc6UauR0Qj",)/D3sYP
%&Y+hmk7V@37iHI.3#q/<3"K:ae`WGWfnb!Qj#7/9+7eu-V;''M[H`Mt:bH_=!M,E^?t?$(8i%B^5?B`u`?B*q/:W;2MWdCPGq:X(
%*O-@/Tl'QnMHGI"-dc8;3F(DY^/ghBC2Qu,;,TYY?#Oq=Ku's5Ot8]JXEj;,PQO>`H*FAi@cT[dP#mXRn>d$HlRf77Tb]aA;jb5A
%5d9%U6Ia=mklTg0LHu.d^-UeLPOl&1OfH)MiG:?=<5]WT:6@XPGuZgtY<D[TDYD\+[G.esIOuRrKZp2\AZ+>USg:sQ)sbnO(2U0F
%=3#;pGpd]VFDrQHm\CoUcU)6Q+=H1(RBjsB_D9$9@rJXC(:+Y-I1C.Lp9n/l;#?L3L1*E\.BdH,STH(;j,6lM:XHGqlMa'm((@@4
%5E(jWhSF__/?uc2h]HuMDbgu(5-Pc>(o_[<RI*uO#L[WO&JJ2_,&d/I)]0o&@SZJ=HWuW_P'h]Jn/0G>K@f-RFn4o^L%]8<VpJ1#
%f^Qqi<kF3JULFOa+mYD<"\=]>So3U[4]K2P.7G_WBLTXJ#?Ko./QQ7Xn"IG4oc)Ts9Y)6m/jC<EC@+0M/1/&mJF^,]c3BT(F:u&d
%Ym\IJD]A[B]HCNs6n?-tmTt.'?h6e5[pK$,kk\:'WcpB4Y"t?6]7ki;_cKif]TfGCTiku3PKiC8lV@-KU_p)7*j,`As'n!Xb-&FQ
%!5?hJ8VMq.Utt@7:q0Y1Dts(QG.6SQj*k!o\(`2mC_i28^UD&R\h(cpg=NQLo"$I2n4[i")VrtPPM*;@NPLi$WQU\6Q/O@')N#m9
%Q>bbeWec_<N[5dCjT@MX4T"lUM[qmSIeeimHdH"$OUe23A_`RVksi6ti_gdbC-F(S.Hkn/`NW.]B<c;jD_9r@hjZTaKHE=??3goI
%_rR/I!dWfj8F0K_p28lfPWu_oJ#0huG?bb;pm1Fl*5o=rfO9'_lKDi0Dn#Lbr_.LA2e2&)*>.[IJ1GZgS&/*R$LGe3-$&5OTo%Vs
%m"HuL@,IY#h+M[?E%^kHO-R.LhrC06^(QS!<u5U`p%Bl*N^be/;RZECH@OWt__;\]0)%[KoNj$(a'VsKF[W_KV\?>ES!Rg]:"nGU
%2-.nWBPEZa2*?,KjiaCG+&L(n2bq9TeE1Hhjt!%OeZm_pRK0?QV\Ql6+'raO<29Ufd6bIUc;HWGdcl2pDJ4#1.q*A9Xm*7*b(9en
%U\Nd*pjI.ibe<Eb`gF\SLaRMQpUZ]IJW=Paq'1Xj4M5$RMsK/'HS_Vs**1d!Z;)g-F/_o48)]dJQKZSb^U<s-fI39p_ouHTT(B'H
%n'RO3Y)(T@<;"2L>0@_a8=-`o58?laobHiOc6-MYN>GGh6XX2Z2%XZY(G/_JD0`U0FW$M6\XVQ+a;ig8#<H3QM?gT\lDSPsC\h`Z
%L'd%gMLGPp"#Uich:5!>Q`rOGNpbs@(f-Z3\0Ku!U\]'f$"'RDRtupqSH%O2'd'R5(CfFTPS3MR-qC'uqO1efO?L>7,,</d?X'"^
%[na1?WAh#?E3=5n!e$U8HQBKQ>K/[i=:<1\iQG,1*L]-n73mA_@R6nF<a%_R@(o*a6=Tlhp=MiV(ub*9a!X48rEI5;f2u@Xgk;k3
%$gg6o[I@bqTru&Y"+(1,qL/I#kqa/(b[.*RdAePeNn=dGeDFVNC<gAkhr90(QH=@2)uK(_IEs_A.4XsZ7kV[^p$;nfjjh,8CmP.:
%$d3"4mFEArg"2Fdor/jY%IG0+K>@&(%=!t<Mm2s3QZ0C&'De=6B#HO!1dYe_B8pesdnmOBp(#R!VC\?SbKNQ@+iKmg1ue#&(h$1m
%@[Okj\_C3Eea3Ca[#gKkQ6W1/%c_*MXHob'jf%#+%:8k[$uKN4[n!)3dGA%5i&eT)=)Th9@PP?n@<rST/n[[bQpto%&'+<h/P^'"
%Qo,mF-_)4A"XZNiTotQkEE^(IQI;kkLg4I-Cd,L(]h&`qRbG)K#Pt4D4<-DNT6/M.^iac*IicJPeKj0n4GW9Wgq.MV!aX7OolIa3
%kAYojEL=Su)SNmmh2J%ukRYRVO6lOkWET31#PM%)X9dqR^SOOie-Cd.3/MY'\ChWA"+=a)Bmi&3(3P8rbo$-K6oXPI.ApF!IJLBZ
%j9%0]W:cnEP/XY,`$$unO'Gb\+:bBQ2=*!MYi*mL)R.i6i,fsi8d0Z'(`4"bUSHZe:qPt1g#1H0jhi]"5:jf&PHcYPS"Ui^<L&O9
%B'g$_I!)tI.LfPR>:Q.1dsAX`Da`ut*;uLoO_fq%0O6MEdl=p79&$P*814b/Fo?;6-JT$mY"tODd(5g$4J9VQrJ);/K(ggo'!Gql
%3sk@f&D\8"kB@V%!XPkm4;4cLDO.KKdH^<r-sijcY>O3>LbZhCAph2MN(*Y',i-:QD(sun;iR%E^-`ePAs0mK^=+%Ba-bu8p%jC]
%X`Q5bA#H6n&Z80^(Hm0!N28npB/>UbD*?BV#D_i5e7.U2WP@d'?5(?JVqXkY#=qgt>OfR2DEB%ZE</REa[Yj_R(aG&mY>$mJ3)qp
%rO&o)ZUZ>/aR5R\"lukS!3>dG;5.LRLCS2*BGN;1cRp<W3&(i7+I3i4s%`.E,'+n.eDEr+>\#I137q0Z!")40l[]K?\^o)7P^:\=
%[eAZp[:Y+e[jMb#iV&V<hpo2/4@m2'B3`K<Z."N9%O:c>Oc.T(B&mFoWC'!`k2_>`7kBo]<?^(G+Ir^HaZ!AgY8el1\9QR?KU^$Q
%FZkutVlri]mD2JqNqR*@0'Am#H6>eK4ZbW\e>;^<aUMXFIX:L'Wd6^L<*Rnhc7\gpr)%uG>FhP?;I3B%]>FAO^SrqJbhfo72Fl_B
%4lhC\j`e.PH'm_\='jELB60P'XB/,`:`SE]CWk,JUNZrTr:4<t^f(dI%O)6JC1hud<&,bnB.,j/2`sTFgqL8t5u6[3SRSA>i)ZBW
%AC=@$Ynqlup3Mi7cVL%RM0Q@bk/ja*%>F*!f#m]=+r=-)Oc)m]_ti^=kLNVEGH9\\oB\?3jRrg;DnNL%`Yp)R](lbuC'EonmBga@
%%;hTtd-1N%cnJ-h1D:q\XBZ&nB/bTVKO*_ZpD"@W-rX$=8Oqt.<oc4aF<_4+Fk-0qm)-_^=PZ+LoKL>&n%ib+Ao$q=OL]IRSCmIN
%#ln6iO8s,4S)CG%'8[Nt[t:pVTtUAF1N[]s?e_RTZW6LLl5NTE#?H=&FW:Wq-g'QlV.h%E`Z%.8X?B2tkfoY9F&I7B\3s6$R:OEe
%^J=U8)*;G^Adm@e;2SE/<Jcq^!Y5iA`8@=W?+Qs=3;U>XJhsm\QtMJSVffk^_^aMa6il1NV@u/,@uGF^pJ9+nZ!p)VZ;kjR$.AW:
%-5JaNVTpVuGRoD5?pLc02uDTprjnt296HcXNmr]J/9I=tP#qjATjs[$.8TK#kLBg)Ib>ZdO$%@Q>Zdi#I=T/^asnrsRRA5sNp!n?
%X+QND_=%Vli`e#t<Q5#2^,]t?#Q6YoQ1t'`*e-rJ?Q`h27I2K!iWVR<(`#$Z$\6)5KuOAKq##/Gn*k'DQ>BMB,3&940RU-n.>KQt
%rWLs"lHte8WNen@)8K&RZbIMR5,:(k!kBR-JCT#";:ATeCFe)VbOX@mX9;03W@KK'Z',XS"poSO-pYY-nnJUj6XACtX^iq,7MW_@
%?FJnn9r[4GGIV"^QcO73HDT*T%@r)f/pjEi.Y10"7*Gf:".u]BRH295T%-?Wjc[4CfitG_;dI-tK33%BS;>uADiPHJJ5>gT0Y:-#
%_rGB7f:2>V@5g?fZE$4eC8C:+F'd_*`j^nR(1:$N_c\_aFO]MjXs;h.%r=GndW-:Sb?9OR2i#iK;=ltsI5n#Ff%GiCI=RFUr=X97
%o^2u(Xfe$6XRH\ui#+O>)6j]<0[s#mg/#@'n&=Q@Yob)m)u7/5NKpfQ7^Tb6,(b7Ol#?5:BoGq8Z8\_/Bqs$QcUur.35#ti%IHVg
%cEQ)mgYPE@%&dH"kYPB1.\=[QlK`Wk?LOs)/ZJSYY3-oCGeOP)Q1QCUg7ZU\U+#U+Ys3Z(em["#.L5h`5>"Su=u`)]bN^C1-XU>Z
%M`*V1MAk&nO-^O-n5D=Z%@&T-=8(<X=P^-68$dk-ha5r*UmBYkFWAj2>[C_DmG-peOO>mk81AVu0QGCI8bNO6.8t4:.ujQ5HeCK\
%T/HNOo$K2gS+lg9]A@GqJ=?!dQM<*u8)Df`f;2a(dJ8?8dZ"D`Mh07#q-2)U\\k&0[$55nXeVAWh7eY)4GnqO^`O&&_0UOAU-HEH
%bH2/t'ff$5A&lp_G&/\$M!t.?<j+b5n(o:KoRZd7BeG^eS^m."!4C!f!9a`i&B!V<A#5\%q&iUN3(u'[IX4.\9mBH$k43R@<\hnW
%#ea6SO-Y3=3-:XGQ4E`));4fp7LV&<De\F#=Lij\17VII`/Y=.Fbi+YM,nL%fD"Z=^Uo>^AFTj;cppK^gR,_LN/9sShp2m]a$fjf
%L//E+h&?WcNo%We2Sqg>ITR!F*OM-'7VP@_n>a"c=@f=&FY=b?$1Y5:35%Su?q1Vm\B%XA'3oFNP?LSSRdl!^KV8K6hh^r/&'NY4
%"RO$3->\?.)e4VReN['Ros"N`'iWsLoCLmEF),)`-9In!f%u?AJ6q''l$teWRULq49O**_]e],pSLMQFa/sQTH-<ug:SQQbF;Ls@
%j$u2lnF*")T/[SlgsAuq/r*IuVI:L$8pE*7Dfu^R/p@An4gQN:ZW;'hlsh74HL#]%cZa&k_j0EFH"M!N);eY(9([aT?.8=;@i5f(
%R.-r7lGU-ZmmT<gWc`[;*q2+!R'h0I8U>t^a(m$]b2r/4"S."hR3LnfDQ0nL#2/sEe.7[26j74RhshiBE#e#(5\'O8mSC%`@1Ah2
%TCEqlJN]U-^sIqrW1dXehWQnl]m@QY%+'cVbDnMH[,q&GH!GbD%`X"F^/t1sM9q)Wm;H8)mP'8Rhl\U#lrgTrc'<OQDbC(t;EZ;_
%QK)E8W85:BoKZmG,]Fc8Y8Ze6I:oY_;IB9j6Q`s"89d];qQQV'6>&6YjBH2NLEQ)5J"[lM&83c0V64\G"0o*KgNKsfSM:f&_(*Je
%X(ELlcR'9u1+7LXRk%67@u4a9A0ip&3!124i?1\E3t#]16EiE1c/ueq6q?9kma=a1#m?SK<0W-%%/a%&NsN.&;7aJf\lRn0k]+!#
%:gCjOCal`8_*>t8:\U0$kK^ui0MY8SC[od>dhP9HnqE^p[b_AlqY)jd_kgE/Z7auB5dGPPCAVn8@](S9B`E+K2%!XV9)tB,3VUs=
%@bEBG*8Q[@7;6ISX8?"a%c0/)O="hY-h\/V9.>3ieUo:iSh*QN><,2cc+b?`QX]#2!mK^S.VF[Z*ers^Q01EI,.^]((32L,[[E!%
%")RDhpAVK,HddiDl[P/\r&NY/]KUHgG_9Ls,Ys!R<_ad,iS8C,r'E!kOj\F2#'U#],M^M0gHD&Gkjk-W&?k<-[kZ7u28loK?!,"V
%<IhT;DZ<X.dr*%5.ll3g5.)/P97cSlRt3=BY4V#hpoG7[%PrIp/OptLXB/q\0,NBEDAW#TmS5!8ALiW9X]84:@^Wm/C#&".)e=YO
%EJUkDKlHn\(scL2GIS:@^mm$C^fT_1]@r87L+2P6r,";'=,gtmq6k;IfFtb6_>bujV'"PFYXp,^a*+'DF`rah61Tkp1S:j#2j5&,
%P->I`YqI483(p?*<j1<!"*[?t,2DYgLC."Q\'!Z7XM$'rT5'/YO?meMp9hpN%bU)YF!'cr^JimJ4]Us:*U;5ALnt(/K,WeHi%Lgi
%:b`MSetY/k@0"2N4>&!>:*U,6:$-oJE%Jgj"^UD%6kscB0qQ_1`BHs*%"42Q`,Uo=]'WtL]h6F#,a7AYia@1H-a(.sD2"I7hFupO
%j,$-uG`82<92'heG3:O)]?0^8V6k;jPm;$qKG?S#_HFBg_I.p3j$+WEnE?tF90:<mY&5hJlAIlUk#]Cqr**Q%\TYW)E"$#XXgM3Z
%X8'Si>/%gH)Wl4%2>uHS3*.PNE0gNJd(^5RGdf:pSs)D:ou4$+LORgVGH.dV*Zk1'jJQ)K]O#NhX(G*N0Aa<n"$X/a5#q\o=3^\7
%[WJsJici_^?LrpAXpN.8Tq-;(UK/%@O+/VC]5Aq"G*Hb?p"*PWYO=@2okpocH+b.E9B`@o<':+\s8QID0,HAsOt=7J1%?i+?r,lF
%]NDjt5>0-r,buO0)6Ho#5n%$`^&-a,qDrm@Ik;pAnEhiR)r[(<6[YB#bdmVf%_aNV[peBMDo%?k-1$"4XCU0[nB/5$DfZ2tlbW'+
%]\,]UV9>Xag,T\I[a).'*:,,`NGlp<7I]r#2S9="jO6Lr2rF/m'tt-q?Ou!Pn:_'r<&)6ing8WTV,:Z=P1\tS!5^qerrlHOWdkC0
%99;)U_a-J/\B.7L".=,r]a_ajg#QPS2kK%)Q(8/m['CT3mIJS6e]<&GW'Y[C+("YA\6+nYj'jML43["JHhl9#TO_Y*P"r#g.2TM+
%kMk>`A@p8LnCr9kc1+#/UN$[F9%Fbqf'Y!7n`bo;X0]HlC[HTp6u3A*'+f<boGQl#Wm/2`K3ORhJPVGqr<^Y8Bd+AH6\U"P&$e]f
%]DKe@Aas^k'&R"2aG`$/jnED;m%Cd/?ScRYO!9Y5CS\C;g^:aP<?i!5l?A^eID_Ws92Jlo]`Y4!]ATlVBh:?;i3gbg*AGPKMh.5]
%O/EWR'#2jHr:SZbmGud_5NnK?[7\]-*BVIoiXlY;pd#J=5`X`g&eU9PDkE?nK%tTYYD21\#&&%I#-?SE66*UBK)L)g7fqtp"7at7
%m'4i+lJcQ-!&W1Q1mFhp',WfB!.Y-V7H.S:.*S+\]QT^P*-pJ)O%%@>%Ycpng<mZk1B6HAp9=Yenog_c>q-o1H+gI%!L22pHG,(]
%*LuAW[:-eoV^8P8r:\sY\YF$TAZ*-J/=,sH4Q/AP;+"dkP&:>D5K$Q5"[<?eP'bfn95@<bhW:ll\T`c!kImoO=Rk*o>!slChdMPX
%)i+(kY:lJ)]UPh26*DBYHgfPYo<gOH(k;,]o)YJ-]3O1d16'M3QYjpWQXB0^Gkpcmj;$;?:;#$+o!;D0?VIX93odng69+],>^;sT
%]7g<(PBVND7eRlCS><iRfDB,tW6+nLOe'aa2u9cVif1.0/)E\V4leb4D*<3/l.3071sc\Y;qgMpp\`D,o4HRLV"Z&TY'RFr1VnFW
%gg590]5L@!>@T2O]mn_Ugs,_@HR4$20C"VTf:9A4c!Ogi]uAaWMRQPI89l_?f(%>BQt(&EkO./AUk;1opVP1e\$O$o06rabGA4T&
%3Eo[F/?^XB<,Sn*r6[lD.F;CL?"2*dh'JXUCVVVsinMc#P&e:NZ*_-lHsA^7fCkLsk2#o4ZuVR?8j&^Q9?F)BI4=i6S6ef(c\/.<
%qF,JiWcO_8\mqD.a)HH@kp>YD=ir[2kgF@3>H2!q#E@irdo%]k,]T3sqN\G#PVlO.f7_&aZEK_3=Unu=j(4Ok;jPB[hS6-K[.a(I
%lY^DsFSU*p*'6AV0-=hp`,b.?[_J>X]F^BMDu5+I]4Kmrnrqd2>1PHt\ZD.(NTE+e'Z6p3k%1p*gg1AT=-h9iV3U_UBR.SsHrO6W
%G#.!r7.4,c7=BQ/?TC)_Gup^pG(&J>%gQ.\r&<WXj]6_XjX.KY[.:_TSQX?`Q60."B;_#[g2"=4dcqeU=1u4ON,r%ODU27^r\!&N
%37jV";CCg<h)et*=H,#2m-7I0U9])g]'ikJb/)Hih,<EZosnCU?S/ulV:E&Af?A!1<+r@YMjglY?7T?`"kOZp2*kR&?/*K*%r7kR
%GQW\'4-HaBf?S8Lc*c?\f)FD%`DM(YA#dCL=Vi12R^&@?=uYBO=^Pt%"P*\Op?fG1r=iMo^"@a<O.7-*H8;$CY%Jdd%bGX!)m/er
%DWP]J,i/:J)l_oAHD_N>6o8.5f_97d9Bto!Ue3]fqeo)>,G*Q$h)GLqgrM@ZCE&=q>%+1NdRnB+,E0"WM4?3oeg#LW[iP-SHu^]Z
%i&c=(#CT,2Z*l;!X;-/m-d`mjX5Q57<=a+0N:4H_LmtHMGQ28om9t9=HA]CS*Zb]sc!u2khn3&I[*:["J)8E$[E$Nqp$#nkA%Xr!
%ID599T2U[bs6fDThB.)U9)eFa=P\IJG&-r^V=pqhm7[i_4%knq%(!A3Z5hQW'$9aI]n#XW'lPJ">NnJ$H0alI_f$8rq=mu8?b6Uq
%206/j@.h;WOEUcb5kt9U-?*-A)1cSnOUo)ghOFaa_95HD>J=a%rlDu[:g2&oK:tmFLC'PYDqkK!;gU#\mI]['=?gNN\!Kkb^$WVs
%AU[i4/rSK3md]mlHDeZ!hd;p:DhC*.g[CQn4L;:)hIH>]jVi1gC'j$uP?DM#bHW!5J&.%:'*`&MP8dVb@bGh[2S5US<S4+eS?Z.M
%bcuFOC9YtCbVcm+?4Cu2rjn^`0]I6C2#;U?h/3FX\>#R[\bFVE3q%u<S%L$A?MUPpHGsOX#UHD78r.siPnd`l-I(Im,dod3^TbI#
%Y6cS#r[$NHF/:,FG:RO(c*+KCIr2M:W]0L3GSH.?MHAPHT3)A`)=`,j;jK=#,DVH!^)fq(aECV,?"RH>I!qbB]rQ?mo&c\iaf;P#
%LIUj^oBEB)IDFCoU1nGdm34T\Zh06_GC81D:88Ce\Ne_0=/r0l2g%,$i`&Z;c)?c4l]ui/YO&6lq?g?=ZF@6J=hVH"fh!`?!PT&)
%G4+upCT!WUa,=$2/#RN"=,7nDG%7fMp22MVPhI_GS?21&2!/D2fiT$a6IE:-?D^UkmV0h=DstA]s10:3]Sl2"C_hHrk?=^ds)Pen
%]&,O\q1GfE;tFB]Q@CqT5M]!S]\K-Q$66FQXgQ&3+Bgih3&dH>e#cU3:ePWD%aC<:L:5Q$gS(jqYD9D&X56[X;/:m!cVLr&Y<>k&
%n`!h7HrIa.L#:Ih$7)@R[to@XD+%-'N#?o$*%aZaAcZt^B^gD5O+t3p5r@?\S4$$GU[-RTD7:@Ge*$,N8NI]I4l')SZ.A5D2SQkJ
%:lRu09jdh`d2S*I2]Hstop`F6@X#GY-I2;<<?e('[#_j]^AT92TKF;BIHNT6dF2jhm-*9o1QNFH1jU.bR'ku/9)RVWYur_-[rSAO
%afs+cQFqMl7$DQSOa5sPEp"eTqQg,HS#\ZB<3GnHduEueqfMl;q>0_]f2MarC+$E_R!5P.(CmYDV6]FGbuEg$iU+k0HEYX)WfcLJ
%m]+F#]g[+XkC0sH3=edQL[uI)q>@n1pD?O.cP!kSfJCFA+-sKBl1]F>4i::,j\577Z($%'4EiEj:SmK5Ot`1Sdd"h%%!,;:9>8T/
%m0n&]aM5i`f?3gGA`N^R,eL1^?"K)*0D!l[[',bd/j9&P9($XOQeC%_kK9>nrbAcY]mLQ?38M-Vc\='TbhR+'>(#1>YKn['B@iuf
%ptLc]P/TLN2rSfAlK2DU?+Ma`#Ou$_q!%0(mGHR0/_A8TGQ-2/q(DA_Q+qZli08Sl<\<.r<)SMG\ZHn4^(L+9*nXA;oAPoe5<fjS
%o*:>jrIXbu\ludsI*B&0T"IibbXA(HcZeqU<u9Q>PEDohc[mJq5Gu3hV<=kkH1_f_\r+6J2d#mPE*MkIqLiDR2;2SVYKm`MK!pid
%5AGtIlPo4TPf[[rAEG)NH^W":YD_##]XaHF/1B\PCD`q1D6j`Vj#!_MV60;mnY3gd`Q%S':DZbC;:"Ud8+_+LpTh^Z^DBN,S(hh[
%<XSA.T&Z$rFE[&J>\b;8$@gIYX^njZf9L[,1onKgDmt%4[I[43Su47rI?QF?jBM?*hfrq%PP[4[X^8)7a22l!rRTE^HgqK?Ib/0(
%`mS_aTFoo$2B'nHihX-!Trp?7lg/,fYg)MR>B6rXS/h,Z7O<PgfA`1iE\!?%H#4FJmg0EoY.Pg3ml*gTan5-ih$aIZY0E;-q5E[b
%/ZFB5DuZe!oGb9b"IOsth"eXn&%mO%Nha^::&gWX^W<;4cb>':/R:.Q%uAjYnJseU[gOS6Q[#jhqrJWRPh&ld7)!,#35h/>?EQ3.
%6O/)?NV1YJ%/e#XZKbjY`P[NV]Fg9pb5_Iq#3!QDdRZ5e\dnQ5W8@oq9#`!-Vq`r@9c&V2!VWSnUPMD=YR;I[i9+B0A%\tQn[\CH
%%<)V[IfGDtK^mCU&,_p:5>7/I3J^H"KckF<8#6Zp$H&na^(=CIQ9;VpEmrQh%Y!EL'6s0SZl^?TnXOkGSet8nGPLY?((Ynr4[B!)
%OHmOROV.+JjDFosn)G%""?BWG=<(OB76qL,HoMF[/Za=rPW;T;i<?9&X=3*:Q3WjgL7C+gT'(]W^rW)IYHgHN;am3MT.8!":fS7X
%;uceT8JHcXaK%Sf@5Lt17#;;o$HE10<J$s>Z@c,J=((h@$)o-RX5!3LN%?G4;je@hQKV;0;'_DqH"7Cc(kq&t7H0+c,.uol4T/"Y
%8I4m]0I-Y="9i[f<e;m>kH['8A`Y&\W.S$VH`d>8Q$;l"Ld@VBPej=+WYuQsR)n3]@+>Da4s-T;ZGK:ikA'`a-enUu\'6O/BacB7
%$\Bk'&h==8ZM6a$3Jep.ActlG(BVn7?>W/D6q%ueeft+1PU(MUcj1H>dMXJ^Z9/Ma.nd++&t&pLWBjRHH(ZX'OG3)nn=1&S"I5),
%6Wm<X,ZP>s.OTKKf[cpWOrT]S8YA6?W%oHZACqe?6raBo8['`q",$(eR&)8T8Ig?#.bLLA.'PK?WWfIGXMU&'K*WHUjcLfGaFTAG
%q>d-1$Vh=*0<)aJ*<K4B<J62:+<F=F*iY"uNBmBWA2k'GPi6,>+jY_"#lp&H/0cQr`!&Siat3'*5KCPn*74tXN2Ub>4A:g"\KEC/
%X9[!GAe\d-:0<)+Z)J!:""G`EPmqaB/<S#R3/1*E"\+*P+82j&FCd9[Dnn8_;N!$WV@"5-rm1,RkXZt(!,n"%J;5"sdFc6\_rOo@
%oG'5P!.fA9WA#i/VMZRJjs_KIM)#U'""\u-@&-$hX[N\CO@7_<#ttaBV+27#K0Y]IC)25t%-t`\T(2RUDHnB:Q#J<$&!"i333L&S
%aA;Mp=88F4&jp/.Zta>hBO1aX%T3<A'G%B<W.W_@bt-f`'Fl,g9Dc&PYTdIs1@;57<.crD0s;.m<71!I4BVgm!&[SMOc^og.ZkPo
%'$+Ae!goOq'@9#/,m5DY'c<$)!"FJ/;ih-GQfLFFCl0A)[)X4&jt/?O9RH,)6)PEQ7K`inZpc/o#720-!6r>D.>a1CXU1ZsS;Q/i
%?pJ=Y)Og_M.>#8H,/\E57f]=E<AYlG:Y5["'.6A)Q/Up8HW4=*Gq4h=47#m+d!lq1!uoPu3']EtZ7;"O"?DU-ACtYF,<u>f5VJsi
%FD1#<7\aB[8k!t+pk@Nn;/j]X#!gI*!_$':*;$4<i;b>?EA1-;+=#N&;SYR@5t4dLJAML6S06Pp$c@%CD:11pX,eBX^VX/E,0Z<@
%F?qB(J]**!J=:#b!.-`E>:2uFGsm[9BN'2LEek_.5q8N0Y6`Jp-75MAnURnR$]9p?W(77=EF=gX'Yup]]S$XnW!Bq./4B\-Gm=!\
%>W256^k8Ae!p*@+_!!rcJdek3JbE^g"dTCIUOe&M#R_h2fUDpmW:8;Q'bqDr5m$($6BPe>3uMHsASH?r)H:%)?"1md!Yki84X-sH
%/1MZ+P[K7e'FE?OPA,M)OU$\T3LP&''>Xom0E^<gG\UY,iXtkgN^=I?8qL`3\dpIrQHXtL8Q>^8`"j+i'GXb:OX(\e$CQi'_721-
%-OHSWAV)^d.UXj<%u&*jUa#_eX-(2f)7#U5ZpYEM0RHQ\/J9;-`98J/!$Q(!+Bhp1+CGN!;^+1MBFPn5Ypuc)a9G(5*@-1Cab!&F
%[&N8GG_Kn*P6ub>#-bn*)'8aJaPeHH"HRLL^W(P9?N'jBr4hOMn9Jni80A)I"k-?P')42oN'X$BR*FOs^fHU>J6$V7Z=3j9<JA@f
%M?(eP0bau5Z6I-unT?UHRUl'615.Bs@Kf,H&k`hiOU=Ak:BDFPXc%cLJ/'4nZm&<ZVC9q3U0jh^LQO#F!UPhTLo$e(!I$k$MMQ6P
%OuPOnJ\@6aoKPGK]*L&fFP\JJE[3E-#iTrXeW9b9K+jh&,_.?aQ7$oE""mCrfEDZj;,Dd=&*f12:^\OfHOuI*X_(R6Z;sHWAR"g-
%juAh[;a-fAXe=3b?qmCa+bhmnZhnqK?k.]TL(?BIRGfi[,r%&Ci"?JbB#(N6B^4OV0#\lg`>etO*/iH%1T2NLM=`KjK+u09!2#9S
%&#@H8OYN^<&tg0J-%ni(77mW_mkn*jN*.D3QUQHO6NGD'8:cc^5]r/68;N$l@PO`*9mMD<*iYe[J6F?'LJ]m)!6R_r,UAX`/<U"E
%6CYj3EIpf^%-0:]#^X8fe,fsQ-)1MWasn].!l]83(%AaB8#['.W5+21U*Nhm0u;iL+sD_PC&]1<3c$-N4?-,>TG*(4%7X?.g]8ml
%"?HtU*U#G[p*hsL%`Ja+P>1D'$1l0@S5Z[CKm(c5e:KXp?'ZeL#h-di>Z;S69L`$Y!>5T+/5KLDW"9]ZmYYNX#[I`C`^1,cDBT/&
%/\n:e5g>UY+V%4Ecp<Hj#]Q2B=X@$t?N>!!"^*#I_.O*!AR>fk>^_arCaFXXa[d02k8a#u)"1#b+i&`k,bb)>oq61!<*06'U,pMn
%Th40SXo4E7"9[#l<D:H<,tnsbGiSrgk9,#"m/f^TH0bs1#tB!G@0!1;K1&`N&hB@b"rLp1GtD5e#m#@'YQ?!pL8Q93$]96=J/!Y*
%Lf>7E;4bU?NXd8\c/9Jl$lK.#$.B+oF?PLu5o2u67jN&B%),%@5cdRL$AW=G\7HG,ROeGR-Q*\I[6Sh26FWj`KF_Z^edcaR#W\!b
%OE^b1-.jY@7WAi>PV&mZ_GVS7LLtYa78RDRAHDjnYH`\E))IXJnd;4F;c\a^A6XQejpmM;+i1n9PQ\fa9l1`0\2$[1'u_W>_IEX>
%8?g8s'-?`UQ'1VAiTWs#PfaROPn5,BSf!&Oeda)Z3,B+o&(mF@jau$Wl3J_L.>ELp#Y>*c2t_4$;CVm-i/#/^LqJ@.g4JaN"HRkf
%kd>Y)[$FZX1B@:R<4#2JC5n-C(3iqsQ!'A%Ue$X[S21]7'T`IAS60QpAX^K/:!0bX/[HoO?m$HZ,$bu^;0XGl@Q<iXG"[`!LqjTQ
%J-?+kN4+Le*!-/b"72PF,:F(]Dbh4o7\iK\+XJm1g`qs[5r4`O";.joNq`sgIMo4+5m2a8VVkjU3g.:(>E#d<\7MUlSAg0t@Mp96
%M)$C"#`=G)*$\(?UaR^H:g)p\$WL)s@M`LD7+;gr$+C)g!hpon@M7'gT(k[=[:%/J.ZapdmL_n*ClH8P%YGD9&qr<d0Hl#KV%jPN
%J-<<6Yq0T>=Y:DE.O$`GZ:\R0!(;\q&W/ol=p\+Y=gZFS-N4(N(25m!a9##A6kSW8+pju(Q,9mN1NZ0DS&$8B&?nrl%O!(rWgHC5
%TBoXOU13'*#^/k!Lp/0U";\f>/Ust.`9\bN<3S3*O>t'_,#R8im"+SlTmfX6Bp8X)Of+:5+i1#e>llUnW2.`D.gkk^BjZr[E1RZ8
%%1T$c$HC-nJoiPk$^?2V3&,H-2<Pg5oYf3j4NVpQQ')jR0>*6d0:o*%n[MmROY$1b-I=;0!3ed)j"5gipL2B>,c.^\aYFCN4c(8R
%<09!@XTo-9H=N%i'f_=N=hnj2[KR%mV3\7Z+cu4r=[]J>,`$^G8L5q20Ikl\7BgN##dd]2+[MVdPQij=V.#``K/4d0JfU5pjq?/H
%Ns+=h_I5_77)g'N^e>cL[QRq`-$=ik4p>1&M0"]9Kc?=TL8HBgR!:SZJR"C9Gc/1UC:1hf/I\g\TBTHDXI**^B<O,B<NpX(\04sg
%`VjiD*"Nr6.g+PLUFQnp+[*W5Sg.gT^;=:;+UbSSXg$SpWKj<0"^5%Ui<Lt9c_8;Z"m0L;g#.Ha6=M2YZXS%YQ4l31_dn9Y!'j$l
%O9h2E`KX];I(h"k_D3kZ:_ZL##^_4?S7k>+$tacq1-Cl1<#VZ2&E#64AlotrW0hXG4g,;gP%#RAcC--d-Iit*TY(sf0K4ckSh(5%
%a&_iOTpnP,GYEm(.gD7n<>j::XRHQ.4BYYQ1+IF!OGfk`aI#%lmMA:Q#t^BF2uqM8O[QAa</GQJ3e:?XM(5&R6qZZC@"Y]U/m@cf
%$qT+S1+U"&QV6Ge%u>b[1f=>eA9^X3/XEJ,O>,P-[N]?%0iC;8(^(V7&Hlm?<D5Lqen(%9>6p!TOONBF=c(9dB/"Is+UsBf1NlM'
%MpF5-70up](Y6lb8>fLJ=5rRW#Wn?W\4hnuLc+58OiS01+6%TcKb[d@7j<2)_;5M-2_gi^m'qae(kRZ>2pC"/-j<"tfERT@F",re
%QmbXc!]c0aY!]N0oOj'F<'Q1<"I\;)e.dN^L<=>3Z\#)d''Ibib^*shi\V.1TcZ@t8B'j#5@A8T0&%dO3eaDC8UU\9;5ta8'XKA3
%rB43M*I.)$D\WHr)ci:cabCn)(J3lqFL%2[KtW)2hBO.(0sX2o+uL/^nKKViSm%tn)Nn>*,t4XD,;*7E/HdPRJk'$9!<Zf1hcHp`
%2#:OM`5a?r%r;Q8QsKtiU2;7a*'27V?gXM<MC:/%>U1\^Vi!i4Q@2,:8]pigY/E:U(i)%"aGQ!o#>'M<U-XqTZ#hl8=p^M7Etg6G
%AJg]n[ogf8,e@)'Rir]cUOU*[AnWqpMW+t+1r,bP+H\:BQr$.iPG#U#\?\f>K9/tTeII_3j3mN"9T"'fP?Fthiu*KBOoWm!!BdlC
%bYiGBDuk6c^=*QD.P;k=/1g<P>2u$*5g5+Y%QV7R_'I-#H,tCJqlIZ#:8V]W,Z0Z)`PTT5;SWPP=ga`&<!493g)`b&BGt"-Fpono
%Mt)i'+_[P)oS#Oq&Q+>[_V-8?!Z%5FJs2WATOO,kHUns-Tngr]<7E"]G>KGXZU.;Y$qOcao9"8Z0jngGK8Dr&c<7]/MT8[u7V!r>
%6%r2@8Dl<>RKY[L=<g\i_YW(3IUElO(`-Y1a\&?L'*Qeu=i/f)"&h+:jrEsGUqmePWIl^U,pfY=V!'eBG9<a`.uGN4W&Sj`P@]N#
%UO4h>rW!%N/"E^g;@bEOpkZroN(ELd^_KEf]AFue>JngO['clh>o_G8qV<=3JNoG?it<?MVjgmP743nB*6U$XBrMq?+sD;?hB%O3
%'HVH(U4\o/G0B@VkA60D$\bi0H4Ea&7UYm#R#;qI65]oILb)Y.igjHenV8O?c>>6?'$:+WY["sXQ5,ol/uUU=G(;T7a=7UK\NnH.
%Gpese=NQb+-^Ztd%P[?MSRClYg0fqnE#e<LEri1(Z;W-<_\=!.No)7PA$AGf"?e:PYY[UiE+1h(8c8"lE`aimY1UX4'%,*_eUchd
%oXno@,Csmf,$'qQ-^8*ATAs`U[@nSX4J`ki&M1tCU<#@2R%,$'ODt$"YUhek.=.ejaL"u^\&KXpeIHsTPUih@o5[/XQ3_^s*2cUC
%p.dg>6b.j/JFYn3#Nbp@H;NH?ed:I:q=UDn01?DpHdXsK*!W/Uf`792WD:fpr7ib`%o=!&n**-KN9?$Cn**+uSnfi#56U'j%aWM1
%2O"jd(*t>m4%Ki0mo+R0hX@TPjo'1i:u7gP&'FcYoUriMY7o(UCZC*=51Ktn3"@GI;fTOY\CH4P"UdNdeAI#]QnPrqD@"Ci=P,tK
%$KZO4KI2aC.!Lam:u7u@TtJu_+3Jrj%R>;XJpf'9M:'B'T"G/%NlV.)4G;d'b`M6P;'/LROseY6j<&r!&BR?llZ';iJJD"A>j2n>
%4Q^7WKV'N@8@$Qi:l1Q*P2+6C*)qcZ3Cuss^pZf+ggkqmFV.fh[AX-B9RFl;"Cbb`.VDbr84hOL7"],<<pjf.hZBT21-L=VFb3n?
%:]N!kNb4>IW^7*cNo!=<LA+gH_`As@5<hj$AAAh5'Spub+n`d]8Q"gALENl4C'ppI/c,4@,2VBZm;/1!K(mVoOlls^"6^*7,R]WH
%,>"\5$aT;uBodjPQ6%+?M7?N0NofI4(DJMH3!R?eQfp_o@s5@NkVXA9fGj&degB>gYaC\*m%>CZW4"#^;/MS.n^(!Ql6Rt?,sL"U
%^]f%"&e%XAMHr>t,,/?E-+5#W'e>[g*$f?T(XTYmWeaYmC6<[0+&-@gVXU<(/).Kbd.;#b9:_7%'4AE8JQ*BQC05bgJ2c1MM5:H\
%<+^lVYDP_n)/FX[`k(0)OK47`F=Q8f/RARS7iXpbkq*V^I6$tYG\/1Ya<seA+9d!2K.SI-TaOelpPg^R\/,o6&idJ?',(ZeXu@oQ
%c/Mab!kh$59b3/mYYQYKXh@;NaU,?_AQ9HqqiXtEa@5)YWU;:4@pD$JZ`?D"?FV2G54,.F_?(dePf]aYC.A>sp#9g3:(a&;Td"LC
%U4\%L(!\uslLEh]1etF+<"AAj6*+Xq)i2Rm5YY(k;Pmi'FbkdNjS6PX%MjBne?H@rm?Er.n0$`9Oo7eMN+&3SMDU3`i=;H%MrZ9l
%[%g'@*c["oe/25l8d$?0P9YpJD></\\._Gq]sE,T[$h>F&H[mHKHR3oFcn#XU`hBpJJ(O@XHnC1eg="6N=9Ht9(]>+f1BN;KI+Tp
%SOb_/g>ZN_UJd*0+NO)Hr%`&OaQ]NlXrAkATc_2+1Zlf]!d\I94om*kFe4FM4Lr#GWKPs[OCfW.W(7CFe2+-;"VaD%ERV_V/$oW2
%9p!F*24,j/l57L[4I2'GqZ;@D,"dYkE(+_$ifsqD[n(c<#5&VKY^E6p?NdRT#rIP.JLEN^[&ZnV?HC0Vf]4`J<[N)1Ocf)BYad!E
%bA]El6gLQL]F[f'&kO?1+:"k+4L@BD8s"n09.CAN@Jf8>)`^4'li8Kq('?:=7A?,&n?TQh"Q>c3J6Ic,4BTcQLQ%&5:'r%M>;P\G
%nSFN#7[;AV!=;OC"Zg.L\O6d>Um,=mHLK8j\Trd"b0],U7Y#a1N#P/;"nbI*?J2""]Al6RYi7'79h?[ef!!L'.@q[Qeu`l'1/(Gu
%aE85>LCX:!]/:#n;615e$QsHI!bI\O3kXV=r%P8rN-LD=elt-AfVne2Md%Hi`E9!)cG/V7*kZWSQ3cMT(O5/6nMV"3m&T3%X^qTZ
%.noU-ZXX4ei5)Zdm19><bH6qCmpsF_a-3tV9L&RbMBo@kST1C8Z^`jk&rM!/Y9<MK+=<Bllbnp<5FrH^EmTa(77s.Z4E7_"3]l3M
%A7aUYN$H%MmrafbHm4T$ahEtg%nn!CnoXpF7QZJ%/K!tCs1c+Fl*2HnNctO#&%i2;Kr_BFlFk:A)%uFHacZYY-Y)XhYY05_?#XKa
%rqGi:aK3[91U8V7ll-i6]">[,.l/C8r!(a,MFhrV"Ud0sl8qTD#+r*sXNWCN.&@6Y>Ye,K>nEXq3)$d(%q00W?FK0aEW%@HiC<A-
%ioSX0o1J)%0rH'%?neo2l4(8;EAmD<N->MBTd%rD_VpR+C3"0Z!QFnRH!DpQ2AG1%iJ69[iH:2ki*hQeXO_^.SmIHQTl'A-&cj^B
%^+@BVKH[Y:@%;BC?2M&pU@=b@*me4)R.Ms3]2V;EeNuXdae^f[\sZRCP7&N,gY/P-&l(%k[?F7.Ri_[JB>[m2/=rI_664W"4=_?\
%0&/_3ErXe.V/o;NQcD\6fh;7aZ%CRBQ!B"DlV1%+.Q+]>G]3u1H#Pc05IcAjq8"A)1`Tael29HPlEIkiXDBl+0`#Ge5SsYP)J<#7
%ICPu:&F>**M6L:?k4K][dk^##%NM]E9A-%@5ignP*[VUaM!]eG`_?t8Ghq[Wo.[3fK$(^1E<]MNQrSt3c"Y09cb$,*QmpR%+Sni(
%Q#$eJAU19]mG7Vt-7:lqqB"s%^eXobqu:>?i3PnH6V(<V::R387*E@u7fg]l'Z1HWkDG/63OAVZS?)1_-^nZ=UH(k]Wb/]$Gf"G%
%LS\j3DC(4_B-DQSh"_:M$C8gPDIXq19VgskG%:bX0bVRIV,+:G7!:EE^g<5,#n"+f"0K*nOH+W.<jI`33W^JE3?WUiak[UQJfQ."
%hKs'F]1;TSrih!DBiV.2n45,r1qEBt?VT27`?&_1&JKr4A(2(CB60,$POEf;)hAcM()[h\JITNVGIot(J;T@Z31rr"%Z/JA6jPDV
%J@8cHiW^V1?RX/>Z5I9'':PrS0ckaf(h;-I$O'`Ee,'0:,"dqcA'Eq<`u*$jO[\!X`$Rqk8Yi=\5#;)"+u-tU%hM^eiQ!_[+K%`f
%hdbt1"Y7m%J7qmpg>NU096%GO9@l+p"^c`2I`a71'R!A8a=7;JP4`NL"UKa'#Es.6IQ%faBU?1O(00PjZS[Y3/05B%orJ9):CaU%
%D8fRp4Z!P+<[3r6j)o[qg:XjLD;LL\k`2k_H)F*PHM?[K7I.B_[5T?<TY]uO$R7tIE,p@@=sd;<JH:fF#b\<HI_eWq9H16O.fD8-
%0<,U)+kgY3;ld4.$c?>MctI)MBM/C0m9_d*g-Q1Ggf5>WJD.8qT9_oF0\AWQK*[9!lp6Mq'HJ=gjGfHc@aJdg5f_@oJj^d`^Ec7$
%O$]=4/jF+a(rVb`M\TL3HE>MbI^cY._mi=4&gq4tAK)c1L!r(dL'AXO!&VF4!I@&JV]piB;6gQW_k;g,9i?S')#sgMTk!iS(Gddc
%i_j:t4r'*iRR#,,0G-?H9d_9Z+>g3n3eb$`>JfpVb@e(J)J_O$%hajS6DW5M<m=`PK@i$"6mrGV#u),"SW=kp5n/Z7JnY$#"9#ge
%K-7231ht0H'.Kj0="T(?#"V;3J8Z^g<#cS^@jaU`mpY.IWW@eUH/s2.FbkL!kS1a8WgN:"Z)N!=kIB4Q#Y[$9h6n0JQpgPn:?4%m
%';\Xn=7dfD`Rh/0p)Uh0Huk'dNL&3H*08)qf&/q_9i',?jF#Qo\+?BO^jL6h%SSIE!mV^k.?7Z3W'bh%Cln>-Ze<pa?MCK]SiI-#
%A)flQphQ%o!PJt;^uUD4B]Y8RJT[7H"Z$atknAm?YeVO`pA(SkRmc96,)#]3,k&-Ne2F]tc$2"uOtVPHb[Q>HF;I_*DtO"#5HLaS
%a6WLRE9u#EG3`FT[]p:"($>:4,s>'#QN=B>Zu:J.VQ^g]o\W+)e*^<M8(o?DDk.<1j/>XLE^W5M"k6]hR2T3)e_h,(ob.,?8ulG>
%(UoAk"'^#Voo?nc3*HaMZ`?+<&'m^PYBrDRY0-s3%"LQ?f)iJ.buf?)b*'Ht])j+;FN4`P"fNo$oV?+/"ks3`[+c>7Z"4SE`ATo]
%p^NItiA&kl'B1Y(bHW#??8X5./4\m2b;KUq]T0]6HBQeX0]>qqD\D2*9Q<7fTn)2:%g\I8K_[(ap;XOVa#H84oHp')f^Jr1b,%!p
%)#?+BOmOY6pIIJPNB@EPU9SLRfc_.t'Cqug&XlQI*9S>%!;Yud),8giBL%;31QJ+b3Xbk6TL1tihWTVCk*P,7dn)ln6\CYn'(KtQ
%ckR9=&.SQL$a!":%2=NEfE3T7YSK,_i>E66"0V/A2:W"R/th_jeNHn\O!'^>jC([m""f&!mfITuKGk2jKoa&uW+ijJFL6-&e8fFV
%+%'5PVYl_N"OMVOYE7TATgU^QBsn7'5^(u6Ul(@;M!(Wub:G&5Z^d195h9l30S(Lg[bm"F[61!D=khQQbX80O\QP]Y@HL.^D#:U,
%2S1BHj6O"D/uc#h--:*N*Oo@c_lX-MhEH5rcs85QR)7tU_f?aHS*_sO,$=J@h=YSk<-1e<H)uSZbV$c6k[m>CR$*X:*j?&mdsBHK
%a!*[R&hu(Z'>!jF`lDb_JmH&Jj^eZ`N\li^/U>Akof:Vh[n""<VCgJiFecML;<<p\J@HF]L.SM-UULWrX4RL]8N=JK&aQ\KT[FBJ
%T"[cPHH.3VaLA7AdH+K#r-[HT0E"dskTU;8Afm?]C1GZ7ROs^6CNcoaQuRZY0Pk%e/:8-m954K=)AGY%#U(OIVVIshWHl#dQl2`?
%^TF@l6SEBi&7T;gct%/:5R[m<ghb96WDMGiRCrq:\KLZ4\C.snOc2P]U!ssjY7g:Z;+fD\84W`XcNt>2Zchi.*M&omENF=d#LdoH
%pd!r_&@l]Dq:Qt7c%.Y$aO8=N:p-:Zh3(gq^*5A5=;<eP76I;(R,DZtK^s5`A3'M5GW&q?1a0gMTK]r8A)!lL\Er%1VHr.6DJ""T
%!7]#M+HGOr$T"g9,UoVt[b7GFaUNT]iE?_Ka`SD]qK`uEAeYV`ghf;R>YfHOM7^E]KG_R8>+hU<cleg6.@1gsgBI6nH@']mhqg%s
%OHEs'D$YcC'R1\4GS11Ujh7&`'gu@(,mf_6E#1,&49T+$!@"WN(50]T=.6K/>WM#jYXe;^Q-uCGjI<>_lOIe,'e7:_pS;F2`=To-
%]fi+D^&\[</!Oi;imR_th;kj2dL>k0Ll^BQ_'ZH2p;jm5U=16\0NUD,:1f5WS.+W6RZ`VpObVN]oGPfIa_`d-RloX`J!cu9';_,M
%`)@)#eAl00<Z'YmGL<Jcjh[UB(&;.Hed'i>Cj@GLA^C^.&nP+;'F/OXR0$bZg*#6J4kag6f4g42Bnm,uoS]7kZV:oh*HH=1%8Qh&
%BJ5Mo7C7pj*aa,5#nHOr]5;89@KF+7qG<#$VfJl>6"g;#Vdnk>hC^2jNH"6g@?BBb=9"*EPV4U&T;$O6lhYKuA9i7,9ak8*i;Slk
%;2Z,UXPp&.'mTs-"M_Wloas&68UOg-J1,lU9;-c8(OH2!:r=+\eUSs]f:DRlkh9L+?<aL6pt(7`M)m:<gi?Ws/YJe^N6cA5IV)i8
%7lFjHEL?B491;=M6U3[Hd:_&`#f7]Z%ppF^Moiu9]rR(F*^:#3S2[gAD90SS2/o$0<:t?:@3->T2)q_&B5*:4-D4hga'lB#[6S(0
%UNKsjm,m&1nZdZV'#*2^E?+o6!@#E5[+R]RL!>%$=WZ5LiUUlpj`:mB>u8$r;32$ILTb4?KB5#8DbO4]&;ojclljr0f;!FL&Z,"*
%a<i:g(p3r$_&U]_6(9tPQ0CS6k@l4A:2`W7,T@D:\14u9FMB-;>l9!i'bu:b/CP1BVI.[."#P2r/5tkGqZ[ODa%@,]OeCY5<4:bV
%4`#6fX#gh655Y]W.;&H#pO>HraV\K0fs;GK7?cl-B@C,QN]:<tXFm,:D!Jp.8nfaT'N*`kOiL.[mK/hHdi4?h8esh'S!@S\ht&l[
%CfHgsnZ_'HjSafRccd_VlB[okgiR:2L[A[4mIqe.#C!Yc:[`=DWO]WlR0ombc3TrL32WbiE(9K\,AeOOhUmp>We,if+b>c4$n4@'
%+l25O!B>4</m81Wg8E_PWYhQqIJ4RZ@:D02-V-"iRgY<0+4$@8Ql[:[<WJD5R#T0<1$CLaL<OjLZ(@GPo;4)3h\o\lrUNht]3:8&
%SlpWs9*sQL1EVZZ"X8]X0,:'<gps,a>%Ss<5A+du,cp4C`+GTs8Zr,OpBP_@Ch:PFS!X6@d_2<@/Uu.d#89V-1#dFD;O4HY33"=r
%hJEduDeD8;Md;'b-?cujZ+T,8\Yk3KO&Ta!%^+JN2k_2gRR7+]anB9;r'i1^Y+,O[$B=O"aZ$,K!%giBHpbtE+B>[*><+amciA+H
%g%$>\&X6^IX\EUsj:L^eZk_Zs7%<W!k%c/Q)5&IeKL:-1+T5`_r,A$>Rk#fU%KSW%A,"N!gV))'Cl*j.g$$M*g1o5`#TT3DF19tc
%&o0[hPLj]Qh*<M#OE(Q0q05jJ:fm]8%G(^j],;5+jq]j="!pnW46-MXl`uKkV/O&&r>$\I(7EF*ULlbTif`ZLe>_@eVmSm>[Mhdo
%r"-\8G@B1j?L@>c6_L7a28;;lE6CbF>L'r[P[ij.nD=tr-5iVU$ZnG*"'Qt&]3W6&;X=,b\6\&'$"ZCne9:cMT]F-W`_JhV9LpV\
%rB(.:11Uf(/tEQGD=3cQIu';[6h\*bS;e':Kl^j%QNBo,0qYj5&QSNr:Dt'T>S16N\3=mjo.#[m#KsC[NA6J#_5cJhI+j-fK5tsY
%h'M/RFpMG>>YTOYmaX:A(b#$*pZ+P0N,h7\EdCI%eB`qYV!3Lrf*`;4abf#YMC@EM&LH7d:f^*Egif&SKP%Jhe6*SQc"DR&0$oU[
%nrn&nVE4!W,^:b,oQbf7,7$_D$eMR]`n1a9S-#Ln%gj`Op=\udE#X>J=f?V)AW,q&%me@e;_7b(>s][:<nb;:QcZkG@b->eRp1do
%eC"m1*4Z4ebu]uR`!mbN%e!]Vr?H9=2?+p8Q(]=>(:mdmr3X<7Z[tW)!ZpNgYJu4PTm?E`./?N<_Jdn?>*HbK&/?V4G#5JQpoG@0
%ns$(T6a8KAC>$$eW:mNPiP9)]WJT^\K\ce#^s->L4GjASf;RYl%`49!W>IG7aC>S%'3#IlF=90WcXN.sl8[VQA9"Bt[VB\u3eg#*
%35iN\*`R:SG!Y.D&Q#)ao`!>X-5h0,XkB/=IlMaM@3)3fL@XLE3c1a=KZ!ksOB#O20K^eh#X=!3efh`pobnB(iQ+RIa"W8O]al2B
%:6g`k-uqU4joXO!_P!pQ&s)MQ+BHZplSa!U.6dmfTT`mV-Z8p&H6>K)QqVXkG@]+piPd,mRniUtiO+O;9#jQU4?sa>5>"g(fjlKd
%2"C=2EsV?BADV<u6OmDAf836WZoCTEkshHgAf"'[`pB\iZJ%(F-T_lSEAWS"BSGi6I&DrFn/7qc#]oW!QFo_*Dt_X!0&B&-<\sW)
%nZ\'Bc+;ON^jpJp.GL5?#jWH3;._%1)-s0Z*&D+31VA@h"sKjVA2js3I6urI69&$\&I%H;O@lZ,^EJjceRhN%1%'T+`U(u4SC*Ro
%"iF"a10Q78e*&]-7Q>)h*<YAc:U%X%CS\E,p1WS(!>j.N`plX'2/GbO,cImb1II4DA"l?')cXH5R*68Y-`]_9&D-R8bI=eg)?bTY
%/p!<[A:M!HIER)kjRFGt4Vj94k3RcqXNU8F,nVq$YlUdAU:,lj*+ZZJT1!@Vm-sEe,U`)#hVoKL-4;&ACkF.jUgf(c%CeF#Z4d-k
%D@G.g:"e1,5?6Ik)em;e"d(@>g#Ctth8\_ZTA3BbZ8-OKJ7c)W!5#&ggl,oJ5b$fWG4[8!*d_(boV0@?9;>XfHb2@d)D70cWE/46
%#411OWYKj"O7`FXrfr9k:ag8n#.$KHVn;&lL$XS1SBP%gHQc[i3N9];h^K?s@N/!BCnsi>I9#<%(ln[DO?/`E#qXBk!La%d#f^/2
%8nkkg*JE4K^g%_(R@(`kK.Q%CV+]8Q26&llP[Ojs"Fu>dAI7'J'TI"MSpcfX\.P]1p&Bo?$3-@0'q7lT]7"K&B+mGR]:C.U1,acp
%4L#p'cs]srAYYo7Dg4eb8SBio73&4d+21`se_Z$6e#i^V@YEaH32Be!.C,umdpq_Vij6YPN^(a'*+;!#,ruIGbmNXeO"oQ^F`SF+
%aWW('1tiaM0=A^05K^?PGDW&.&[MdC2(!sFf#I=s70l)Yh<*IKmQN"Bh_oK3!6(X&:M5k/aU([hfJhD2e]fWH&D'A#`O,gS/3!B+
%ZQNG>m%C("f8^<k#p9\]"/4,"L6p&K61CJ40%q-BLp]M)K5"F=1nMIFUq/RW)s`=GN3T0-l3;PQdVN;r8:!q0"(uHZ*\o"J178ZO
%;%f=7[r!6b@Q88Z2@bOl"NiQZ7;9j:Z5FeD1=/T=CfZQsY)Y%oTO,#e2Jn1rZq/+bq@2G6NB,SeU>KK*VDG;`EU4g9A\rOAelH2J
%HtE<DQ;6Cl)I1')(_13p[@AO?31K5YZ3>$sZV,l(D'6q'Kn#/AU5V(pBqi(XG8HGV3\f"**;8:;7WAqP:W76S1f)^J/hThs]0A(h
%'7j]C2?T>_nBNnirnV9X+q><kV0`'.&rjM&n\kPUc!#-79Ctt+'&:5ufd\:81\Chl?.r-[iNhOmZmOGb%$:YuBp7I^HIB-S3[sH>
%74mgAT_#7^d0++PFAFO^+EpD+7r]X<X;(GA;ZUl^66qU)n*VoC6@?5Q"S)EKZ*VbFi2`^kVIK)S]3)jZeZJssGAWr%3$G?kPFaWG
%c>[Sr[gNO[5c,lP3.26U?Yj+D<$:E1X9/h36E4kY>Sq+XB-?_UL72Llm7I,dYLXT@bN?TC5:e!$`n/bEbT.B]M_s!C>J,?n,[oA8
%Wl59iFe=n:^sG%T!pXX4G<_q+QJV#9EpXK17ae6?mu[4_X:=W,LpbH33ep&ZGT0QgBSU?#mbr"J,fGb9mDsaR9HRS)5[8NZ>"%Qo
%#m'^%EkA!iP3Wh;W9^a6,:JNSFk!2q;j!duGo@E9idqopfRo:Aeo[pG(6pFTHB)9Y+?@l.WS#C#io1]m:fue?.&6FX.Ymnkb`OiL
%<pfQ(G4jl9[Z'<%O-*eB?@6fsGMMiA09KU,]PQbZN;Q#K/.-Q>Q(MH??3JWl^-Es\>B/P\4-F\:#]X4E^(jc*(JlQI\1\t_pRQ;2
%#cO0NjSau5!m6CmH/'3fC*n(P+6(!7-%fKC?O<pJ7l)P]L$s,3^uN/AUSoOJ&2W_^L%b<O``<)I[]#r:pB><m,*2Ufb&&%SO8AuV
%L7fCX"_qd,O8B!QDXm[_qaTcXHOrnhg03,fJ/5EL-e`I36<a5VPY3UdB)iA5YiE/^b#mVEM>EsC[d>7'$d]Dc(8#*cQV5i;o;8Vc
%&GB]0[S,8>.XEtc7h7=V]G>.I&L3HlR.i*P$"uB:TOgW*-'(TDE"c^[PV6HP5jiEr==NhA(q\u?WWH2#]bPo`%KZE%hld;;TMrhg
%@Gd),eo]1C@:.+09hQA@^-Gt[jtDG?g:XTfBeln6ikCMhk?N>7$`NU;Q#ir[W:<>L$r)@QA+qQA9uoDjgfdN9P=8L76\d>rBT@(>
%5[=l<e\AV(FFT8H!p)Ha7LXquc,8-O<sN:3%`8"ARs<"_SFX2L+Y/Oa3;7Y:h.>6VK4s3MT-%J4B9.pa('Wo\q\%`?s1;=WJ6L`p
%+6ah/@bd<HR?)>p(0`O"O8H5':.&[H[kgYG)"pDAQpfKB^49,9HqD7cMcR:1>TrIgkl;aanj?Y!l:W<'Pb%Oj5)+J?''?]WI6/=[
%Q`r-9/>mInq_A8+]>j)c"N&>]hQNkrKYm:]CcB+HAI-D:)E'_\bNP;;EI.2+EsnO262!K3?T[::hNqu2%&`M>l5O>XM#);ORsKqf
%!cl':HJPVbrr/d\2nf+=O19&nkT.a[ON"QaN`4^WIE]'MIr)]Fm(=p[iQAELj:[D]$K/oYhCIC@Xh24R$N>U.4'ZpU0ll+:<>Whr
%\pbME]Lkmmak1_t_`!.FBNuh0EI._7j&#GX,NaC`oMK)nT"On4.h22kB!#R/<Es4a9$/2?cD6,X1j(#R@t;5R$oa_&hLio5&&5_"
%:VI!=4$s0"+*?nsg`d\;B*r;L&3TpCQ+d392uS;'Eh$P'leDC;nACT*r73LqqrOl:`uflCV+k#&s7-[RcelM7LZ]1TJ,S^%^]3f`
%:G6()rUf[FbKK'u\$p3mroWqs?@Mk;RpUU?p3XPo4nD_!q<"l1oCCkpn%S_%(]NsJoB.dsQ0WbfC[o.=iVoI!q=%>X'ebW_r91V^
%5(*1qr;FD.fCLqnT0N.LB8.LHmr+Ojp&6m'-CVQ[q*T)h=Op6Th:iD8Y91LSo%gmESq"A#q")ZN^O,ql21PW'r:)03F*oZ`oYVog
%H2dH\pFi0=q>''o?[;&!7E)n^]Q*qq_lu+(5khl49@kmM3=R@S<j-F;LQAQ6TSSMQHI8:D!JU@TS=Bd0V+iMrHiU*AYS@_h$k"E!
%j``/3=WZFC6N5ZM#UVlX_,I6.CqVI=Dit+rB,<mANu.9_h5\Eh[b%q#q`Wtulsg:<%8hK>MGljD"d9G*6"NNu+VGq/*nRnB[Yb>0
%Q,aX=.]:82d/C,Wl=f6-?:^c[3&>V!@Yg,f0[RW4Y_l^0MZo['r8:2ON#Q2MG:b^6gpo9ZHR\Gkj%RK8osuo?:0tki41C5%YjmL]
%5:f`/>`H^AWU&@nSbt"]e,,oCa$-rX^Vfn)G+O9*hf3p.>9j.Ds*Ar_ckaMnr3r"?gc%4L?H:o+Sd#Z)Dnl&HI!*:`Ub/Z-1^:ZS
%N0\]GXXoKV^\^)DB!N?s(GiBEYl);[`mnPn+uOCd=NlNI;%V==]hR\YaNia6T6Kf5Fe*Y0F!Z1-5?Mi7RF-gVBS6,.l";9k3>8*<
%p1F[LKr3EaU2XDac>.TKRkrj>-\S>;JoV7;I>&?$!s.,Sh<)Crcr;\(/Q:Qd)T$bVar,QfMT%+R8t>3!MHf6;GAjkY>!(0ilK[+g
%*b422^MX!j9]+UrJ%pA[s8E"Inb_Kf?iK]nq84qgIf?ZlIsV+cbIcq5T.nPtIQ[W%mb?&@5CN@do?4b<^AHkB5k*-Hi"s0'p$_nE
%k<Jhc./t<s~>
%AI9_PrivateDataEnd
